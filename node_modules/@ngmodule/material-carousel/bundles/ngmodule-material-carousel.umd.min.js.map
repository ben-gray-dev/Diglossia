{"version":3,"sources":["ng://@ngmodule/material-carousel/lib/carousel-slide/carousel-slide.component.ts","ng://@ngmodule/material-carousel/lib/carousel.component.ts","ng://@ngmodule/material-carousel/lib/carousel.module.ts"],"names":["MatCarouselSlideComponent","sanitizer","this","overlayColor","hideOverlay","disabled","prototype","ngOnInit","image","bypassSecurityTrustStyle","Component","args","selector","template","DomSanitizer","Input","ViewChild","TemplateRef","Left","Right","Index","MatCarouselComponent","animationBuilder","renderer","platformId","timings","hideArrows","hideIndicators","color","proportion","useKeyboard","useMouseWheel","change","EventEmitter","_autoplay","autoplay$","Subject","interval$","BehaviorSubject","slides$","_maxWidth","maxWidth$","_loop","loop$","_orientation","orientation$","timerStop$","destroy$","playing","Object","defineProperty","value","next","listKeyManager","activeItemIndex","activeItem","ngAfterContentInit","_this","ListKeyManager","slidesList","withVerticalOrientation","withHorizontalOrientation","withWrap","updateActiveItem","pipe","takeUntil","subscribe","playAnimation","ngAfterViewInit","stopTimer","startTimer","resetTimer","slideTo","filter","length","resetSlides","ngOnDestroy","complete","goto","Direction","previous","index","onKeyUp","event","onKeydown","onMouseEnter","onMouseLeave","onMouseWheel","preventDefault","Δ","Math","sign","wheelDelta","onResize","onPan","slideElem","Δx","deltaX","isOutOfBounds","setStyle","carouselList","nativeElement","getTranslation","getOffset","onPanEnd","removeStyle","abs","getWidth","left","orientation","getBoundingClientRect","offsetParent","lastIndex","width","isVisible","isPlatformBrowser","elem","carouselContainer","docViewTop","window","pageYOffset","docViewBottom","innerHeight","elemOffset","elemTop","top","height","offset","clientWidth","direction","rtl","setNextItemActive","setPreviousItemActive","setActiveItem","translation","animation","build","animate","style","transform","create","onStart","onDone","emit","currentIndex","destroy","play","slides","reset","toArray","slice","timer$","interval","autoplay","loop","AnimationBuilder","Renderer2","Inject","PLATFORM_ID","Output","ContentChildren","HostListener","MatCarouselModule","NgModule","declarations","imports","CommonModule","MatButtonModule","MatIconModule","exports"],"mappings":"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","sourcesContent":["import { ListKeyManagerOption } from '@angular/cdk/a11y';\nimport {\n  Component,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\n\nimport { MatCarouselSlide } from './carousel-slide';\n\n@Component({\n  selector: 'mat-carousel-slide',\n  templateUrl: './carousel-slide.component.html',\n  styleUrls: ['./carousel-slide.component.scss']\n})\nexport class MatCarouselSlideComponent\n  implements ListKeyManagerOption, MatCarouselSlide, OnInit {\n  @Input() public image: SafeStyle;\n  @Input() public overlayColor = '#00000040';\n  @Input() public hideOverlay = false;\n  @Input() public disabled = false; // implements ListKeyManagerOption\n\n  @ViewChild(TemplateRef) public templateRef: TemplateRef<any>;\n    \n  constructor(public sanitizer: DomSanitizer) {\n  }\n\n  public ngOnInit(): void {\n    if (this.image) {\n      this.image = this.sanitizer.bypassSecurityTrustStyle(`url(\"${this.image}\")`);\n    }\n  }\n}\n","import { animate, style, AnimationBuilder } from '@angular/animations';\nimport { ListKeyManager } from '@angular/cdk/a11y';\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Inject,\n  Input,\n  OnDestroy,\n  Output,\n  PLATFORM_ID,\n  QueryList,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport { ThemePalette } from '@angular/material';\nimport { interval, BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { MatCarousel, Orientation, SvgIconOverrides } from './carousel';\nimport { MatCarouselSlideComponent } from './carousel-slide/carousel-slide.component';\n\nenum Direction {\n  Left,\n  Right,\n  Index\n}\n\n@Component({\n  selector: 'mat-carousel',\n  templateUrl: './carousel.component.html',\n  styleUrls: ['./carousel.component.scss']\n})\nexport class MatCarouselComponent\n  implements AfterContentInit, AfterViewInit, MatCarousel, OnDestroy {\n  @Input() public timings = '250ms ease-in';\n  @Input() public svgIconOverrides: SvgIconOverrides;\n\n  @Input()\n  public set autoplay(value: boolean) {\n    this.autoplay$.next(value);\n    this._autoplay = value;\n  }\n\n  @Input()\n  public set interval(value: number) {\n    this.interval$.next(value);\n  }\n\n  public get loop(): boolean {\n    return this._loop;\n  }\n  @Input()\n  public set loop(value: boolean) {\n    this.loop$.next(value);\n    this._loop = value;\n  }\n\n  @Input() public hideArrows = true;\n  @Input() public hideIndicators = true;\n  @Input() public color: ThemePalette = 'accent';\n\n  public get maxWidth(): string {\n    return this._maxWidth;\n  }\n  @Input()\n  public set maxWidth(value: string) {\n    this._maxWidth = value;\n    this.maxWidth$.next();\n  }\n\n  @Input() public proportion = 25;\n\n  @Input()\n  public set slides(value: number) {\n    this.slides$.next(value);\n  }\n\n  @Input() public useKeyboard = false;\n  @Input() public useMouseWheel = false;\n\n  public get orientation(): Orientation {\n    return this._orientation;\n  }\n  @Input()\n  public set orientation(value: Orientation) {\n    this.orientation$.next(value);\n    this._orientation = value;\n  }\n\n  @Output()\n  public change: EventEmitter<number> = new EventEmitter<number>();\n\n  public get currentIndex(): number {\n    if (this.listKeyManager) {\n      return this.listKeyManager.activeItemIndex;\n    }\n\n    return 0;\n  }\n  public get currentSlide(): MatCarouselSlideComponent {\n    if (this.listKeyManager) {\n      return this.listKeyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  @ContentChildren(MatCarouselSlideComponent) public slidesList: QueryList<\n    MatCarouselSlideComponent\n  >;\n  @ViewChild('carouselContainer') private carouselContainer: ElementRef<\n    HTMLDivElement\n  >;\n  @ViewChild('carouselList') private carouselList: ElementRef<HTMLElement>;\n  public listKeyManager: ListKeyManager<MatCarouselSlideComponent>;\n\n  private _autoplay = true;\n  private autoplay$ = new Subject<boolean>();\n\n  private interval$ = new BehaviorSubject<number>(5000);\n  private slides$ = new BehaviorSubject<number>(null);\n\n  private _maxWidth = 'auto';\n  private maxWidth$ = new Subject<never>();\n\n  private _loop = true;\n  private loop$ = new Subject<boolean>();\n\n  private _orientation: Orientation = 'ltr';\n  private orientation$ = new Subject<Orientation>();\n\n  private timer$: Observable<number>;\n  private timerStop$ = new Subject<never>();\n\n  private destroy$ = new Subject<never>();\n  private playing = false;\n\n  constructor(\n    private animationBuilder: AnimationBuilder,\n    private renderer: Renderer2,\n    @Inject(PLATFORM_ID) private platformId\n  ) {}\n\n  public ngAfterContentInit(): void {\n    this.listKeyManager = new ListKeyManager(this.slidesList)\n      .withVerticalOrientation(false)\n      .withHorizontalOrientation(this._orientation)\n      .withWrap(this._loop);\n\n    this.listKeyManager.updateActiveItem(0);\n    this.listKeyManager.change\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.playAnimation());\n  }\n\n  public ngAfterViewInit(): void {\n    this.autoplay$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n      this.stopTimer();\n      this.startTimer(value);\n    });\n\n    this.interval$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n      this.stopTimer();\n      this.resetTimer(value);\n      this.startTimer(this._autoplay);\n    });\n\n    this.maxWidth$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.slideTo(0));\n\n    this.loop$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(value => this.listKeyManager.withWrap(value));\n\n    this.orientation$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(value => this.listKeyManager.withHorizontalOrientation(value));\n\n    this.slides$\n      .pipe(\n        takeUntil(this.destroy$),\n        filter(value => value && value < this.slidesList.length)\n      )\n      .subscribe(value => this.resetSlides(value));\n  }\n\n  public ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  public next(): void {\n    this.goto(Direction.Right);\n  }\n\n  public previous(): void {\n    this.goto(Direction.Left);\n  }\n\n  public slideTo(index: number): void {\n    this.goto(Direction.Index, index);\n  }\n\n  @HostListener('keyup', ['$event'])\n  public onKeyUp(event: KeyboardEvent): void {\n    if (this.useKeyboard && !this.playing) {\n      this.listKeyManager.onKeydown(event);\n    }\n  }\n\n  @HostListener('mouseenter')\n  public onMouseEnter(): void {\n    this.stopTimer();\n  }\n\n  @HostListener('mouseleave')\n  public onMouseLeave(): void {\n    this.startTimer(this._autoplay);\n  }\n\n  @HostListener('mousewheel', ['$event'])\n  public onMouseWheel(event: MouseWheelEvent): void {\n    if (this.useMouseWheel) {\n      event.preventDefault(); // prevent window to scroll\n      const Î = Math.sign(event.wheelDelta);\n\n      if (Î < 0) {\n        this.next();\n      } else if (Î > 0) {\n        this.previous();\n      }\n    }\n  }\n\n  @HostListener('window:resize', ['$event'])\n  public onResize(event: Event): void {\n    // Reset carousel when window is resized\n    // in order to avoid major glitches.\n    this.slideTo(0);\n  }\n\n  public onPan(event: any, slideElem: HTMLElement): void {\n    let Îx = event.deltaX;\n    if (this.isOutOfBounds()) {\n      Îx *= 0.2; // decelerate movement;\n    }\n\n    this.renderer.setStyle(slideElem, 'cursor', 'grabbing');\n    this.renderer.setStyle(\n      this.carouselList.nativeElement,\n      'transform',\n      this.getTranslation(this.getOffset() + Îx)\n    );\n  }\n\n  public onPanEnd(event: any, slideElem: HTMLElement): void {\n    this.renderer.removeStyle(slideElem, 'cursor');\n\n    if (\n      !this.isOutOfBounds() &&\n      Math.abs(event.deltaX) > this.getWidth() * 0.25\n    ) {\n      if (event.deltaX <= 0) {\n        this.next();\n        return;\n      }\n      this.previous();\n      return;\n    }\n    this.playAnimation(); // slide back, don't change current index\n  }\n\n  private isOutOfBounds(): boolean {\n    const sign = this.orientation === 'rtl' ? -1 : 1;\n    const left =\n      sign *\n      (this.carouselList.nativeElement.getBoundingClientRect().left -\n        this.carouselList.nativeElement.offsetParent.getBoundingClientRect()\n          .left);\n    const lastIndex = this.slidesList.length - 1;\n    const width = -this.getWidth() * lastIndex;\n\n    return (\n      (this.listKeyManager.activeItemIndex === 0 && left >= 0) ||\n      (this.listKeyManager.activeItemIndex === lastIndex && left <= width)\n    );\n  }\n\n  private isVisible(): boolean {\n    if (!isPlatformBrowser(this.platformId)) {\n      return false;\n    }\n\n    const elem = this.carouselContainer.nativeElement;\n    const docViewTop = window.pageYOffset;\n    const docViewBottom = docViewTop + window.innerHeight;\n    const elemOffset = elem.getBoundingClientRect();\n    const elemTop = docViewTop + elemOffset.top;\n    const elemBottom = elemTop + elemOffset.height;\n\n    return elemBottom <= docViewBottom || elemTop >= docViewTop;\n  }\n\n  private getOffset(): number {\n    const offset = this.listKeyManager.activeItemIndex * this.getWidth();\n    const sign = this.orientation === 'rtl' ? 1 : -1;\n    return sign * offset;\n  }\n\n  private getTranslation(offset: number): string {\n    return `translateX(${offset}px)`;\n  }\n\n  private getWidth(): number {\n    return this.carouselContainer.nativeElement.clientWidth;\n  }\n\n  private goto(direction: Direction, index?: number): void {\n    if (!this.playing) {\n      const rtl = this.orientation === 'rtl';\n\n      switch (direction) {\n        case Direction.Left:\n          return rtl\n            ? this.listKeyManager.setNextItemActive()\n            : this.listKeyManager.setPreviousItemActive();\n        case Direction.Right:\n          return rtl\n            ? this.listKeyManager.setPreviousItemActive()\n            : this.listKeyManager.setNextItemActive();\n        case Direction.Index:\n          return this.listKeyManager.setActiveItem(index);\n      }\n    }\n  }\n\n  private playAnimation(): void {\n    const translation = this.getTranslation(this.getOffset());\n    const factory = this.animationBuilder.build(\n      animate(this.timings, style({ transform: translation }))\n    );\n    const animation = factory.create(this.carouselList.nativeElement);\n\n    animation.onStart(() => (this.playing = true));\n    animation.onDone(() => {\n      this.change.emit(this.currentIndex);\n      this.playing = false;\n      this.renderer.setStyle(\n        this.carouselList.nativeElement,\n        'transform',\n        translation\n      );\n      animation.destroy();\n    });\n    animation.play();\n  }\n\n  private resetSlides(slides: number): void {\n    this.slidesList.reset(this.slidesList.toArray().slice(0, slides));\n  }\n\n  private resetTimer(value: number): void {\n    this.timer$ = interval(value);\n  }\n\n  private startTimer(autoplay: boolean): void {\n    if (!autoplay) {\n      return;\n    }\n\n    this.timer$\n      .pipe(\n        takeUntil(this.timerStop$),\n        takeUntil(this.destroy$),\n        filter(() => this.isVisible())\n      )\n      .subscribe(() => {\n        this.listKeyManager.withWrap(true).setNextItemActive();\n        this.listKeyManager.withWrap(this.loop);\n      });\n  }\n\n  private stopTimer(): void {\n    this.timerStop$.next();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { MatCarouselComponent } from './carousel.component';\nimport { MatCarouselSlideComponent } from './carousel-slide/carousel-slide.component';\n\n@NgModule({\n  declarations: [MatCarouselComponent, MatCarouselSlideComponent],\n  imports: [CommonModule, MatButtonModule, MatIconModule],\n  exports: [MatCarouselComponent, MatCarouselSlideComponent]\n})\nexport class MatCarouselModule {}\n"]}