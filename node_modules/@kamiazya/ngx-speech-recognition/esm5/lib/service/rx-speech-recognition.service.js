/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Observable, pipe, Subject, BehaviorSubject, } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { Injectable, ApplicationRef, Inject, Optional } from '@angular/core';
import { SpeechRecognitionGrammars, SpeechRecognitionLang, SpeechRecognitionContinuous, SpeechRecognitionInterimResults, SpeechRecognitionMaxAlternatives, SpeechRecognitionServiceUri, } from './speech-recognition.token';
import { SpeechRecognitionCommon, } from './speech-recognition.common';
/** @type {?} */
var onType = (/**
 * @param {?} type
 * @return {?}
 */
function (type) {
    return filter((/**
     * @param {?} e
     * @return {?}
     */
    function (e) { return (e.type === type); }));
});
var ɵ0 = onType;
/** @type {?} */
export var resultList = pipe(onType('result'), map((/**
 * @param {?} e
 * @return {?}
 */
function (e) { return e.results; })));
var RxSpeechRecognitionService = /** @class */ (function (_super) {
    tslib_1.__extends(RxSpeechRecognitionService, _super);
    function RxSpeechRecognitionService(ref, grammars, lang, continuous, interimResults, maxAlternatives, serviceURI) {
        var _this = _super.call(this, grammars, lang, continuous, interimResults, maxAlternatives, serviceURI) || this;
        _this.ref = ref;
        _this.proxy$ = new Subject();
        _this._started$ = new BehaviorSubject(false);
        _this.initInternal();
        return _this;
    }
    Object.defineProperty(RxSpeechRecognitionService.prototype, "$", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this.proxy$));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxSpeechRecognitionService.prototype, "started$", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this._started$));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    RxSpeechRecognitionService.prototype.initInternal = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // set handlers
        /** @type {?} */
        var handler = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.proxy$.next(e);
            _this.ref.tick();
        });
        /** @type {?} */
        var errHandler = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.proxy$.error(e);
            _this.ref.tick();
        });
        this.internal.onaudiostart = handler;
        this.internal.onsoundstart = handler;
        this.internal.onspeechstart = handler;
        this.internal.onspeechend = handler;
        this.internal.onsoundend = handler;
        this.internal.onaudioend = handler;
        this.internal.onresult = handler;
        this.internal.onnomatch = handler;
        this.internal.onerror = errHandler;
        this.internal.onstart = handler;
        this.internal.onend = handler;
        // see setter methods
        this.grammars = this._grammars;
        this.lang = this._lang;
        this.continuous = this._continuous;
        this.interimResults = this._interimResults;
        this.maxAlternatives = this._maxAlternatives;
        this.serviceURI = this._serviceURI;
        this.proxy$.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            switch (e.type) {
                case 'start':
                    _this._started$.next(true);
                    break;
                case 'end':
                    _this._started$.next(false);
                    break;
            }
        }));
    };
    // The listen() method aims to recognize the grammar associated with the current SpeechRecognition,
    // Observable is returned for handling voice recognition service listening to incoming voice.
    // When you subscrive the return value, listening begins and listening ends when an end event occurs.
    // Interrupt listening by unsubscribing in the middle.
    //
    // listen() メソッドは、現在のSpeechRecognitionに
    // 関連付けられた文法を認識することを目的として、
    // 着信音声を聴取する音声認識サービスを扱うためのObservableが返されます。
    // 返り値をsubscriveすると聴取が開始され、endのイベントが発生すると聴取を終了します。
    // 途中でunsbscriveすることで聴取を中断します。
    // The listen() method aims to recognize the grammar associated with the current SpeechRecognition,
    // Observable is returned for handling voice recognition service listening to incoming voice.
    // When you subscrive the return value, listening begins and listening ends when an end event occurs.
    // Interrupt listening by unsubscribing in the middle.
    //
    // listen() メソッドは、現在のSpeechRecognitionに
    // 関連付けられた文法を認識することを目的として、
    // 着信音声を聴取する音声認識サービスを扱うためのObservableが返されます。
    // 返り値をsubscriveすると聴取が開始され、endのイベントが発生すると聴取を終了します。
    // 途中でunsbscriveすることで聴取を中断します。
    /**
     * @return {?}
     */
    RxSpeechRecognitionService.prototype.listen = 
    // The listen() method aims to recognize the grammar associated with the current SpeechRecognition,
    // Observable is returned for handling voice recognition service listening to incoming voice.
    // When you subscrive the return value, listening begins and listening ends when an end event occurs.
    // Interrupt listening by unsubscribing in the middle.
    //
    // listen() メソッドは、現在のSpeechRecognitionに
    // 関連付けられた文法を認識することを目的として、
    // 着信音声を聴取する音声認識サービスを扱うためのObservableが返されます。
    // 返り値をsubscriveすると聴取が開始され、endのイベントが発生すると聴取を終了します。
    // 途中でunsbscriveすることで聴取を中断します。
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var listener = new Observable((/**
         * @param {?} ovserver
         * @return {?}
         */
        function (ovserver) {
            // create subscriotion
            /** @type {?} */
            var subscriotion = _this.proxy$.subscribe({
                next: (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    ovserver.next(e);
                    if (e.type && e.type === 'end') {
                        _this.internal.stop();
                        ovserver.complete();
                        subscriotion.unsubscribe();
                    }
                }),
                error: (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return ovserver.error(e); }),
            });
            // Speech Recognition start
            _this.internal.start();
            return (/**
             * @return {?}
             */
            function () {
                _this.internal.abort();
                subscriotion.unsubscribe();
            });
        }));
        return listener;
    };
    RxSpeechRecognitionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RxSpeechRecognitionService.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionGrammars,] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionLang,] }] },
        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionContinuous,] }] },
        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionInterimResults,] }] },
        { type: Number, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionMaxAlternatives,] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionServiceUri,] }] }
    ]; };
    return RxSpeechRecognitionService;
}(SpeechRecognitionCommon));
export { RxSpeechRecognitionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RxSpeechRecognitionService.prototype.proxy$;
    /**
     * @type {?}
     * @private
     */
    RxSpeechRecognitionService.prototype._started$;
    /**
     * @type {?}
     * @private
     */
    RxSpeechRecognitionService.prototype.ref;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,