/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, Inject, Optional, } from '@angular/core';
import { SpeechRecognitionGrammars, SpeechRecognitionLang, SpeechRecognitionContinuous, SpeechRecognitionInterimResults, SpeechRecognitionMaxAlternatives, SpeechRecognitionServiceUri, SpeechRecognitionAudiostartHandler, SpeechRecognitionSoundstartHandler, SpeechRecognitionSpeechstartHandler, SpeechRecognitionSpeechendHandler, SpeechRecognitionSoundendHandler, SpeechRecognitionAudioendHandler, SpeechRecognitionResultHandler, SpeechRecognitionNomatchHandler, SpeechRecognitionErrorHandler, SpeechRecognitionStartHandler, SpeechRecognitionEndHandler, } from './speech-recognition.token';
import { SpeechRecognitionCommon, } from './speech-recognition.common';
// @dynamic
/**
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API
 */
export class SpeechRecognitionService extends SpeechRecognitionCommon {
    /**
     * @param {?} ref
     * @param {?} grammars
     * @param {?} lang
     * @param {?} continuous
     * @param {?} interimResults
     * @param {?} maxAlternatives
     * @param {?} serviceURI
     * @param {?} audiostartHandler
     * @param {?} soundstartHandler
     * @param {?} speechstartHandler
     * @param {?} speechendHandler
     * @param {?} soundendHandler
     * @param {?} audioendHandler
     * @param {?} resultHandler
     * @param {?} nomatchHandler
     * @param {?} errorHandler
     * @param {?} startHandler
     * @param {?} endHandler
     */
    constructor(ref, grammars, lang, continuous, interimResults, maxAlternatives, serviceURI, audiostartHandler, soundstartHandler, speechstartHandler, speechendHandler, soundendHandler, audioendHandler, resultHandler, nomatchHandler, errorHandler, startHandler, endHandler) {
        super(grammars, lang, continuous, interimResults, maxAlternatives, serviceURI);
        this.ref = ref;
        this.audiostartHandler = audiostartHandler;
        this.soundstartHandler = soundstartHandler;
        this.speechstartHandler = speechstartHandler;
        this.speechendHandler = speechendHandler;
        this.soundendHandler = soundendHandler;
        this.audioendHandler = audioendHandler;
        this.resultHandler = resultHandler;
        this.nomatchHandler = nomatchHandler;
        this.errorHandler = errorHandler;
        this.startHandler = startHandler;
        this.endHandler = endHandler;
        this.initHandlers();
        this.initInternal();
    }
    /**
     * @private
     * @return {?}
     */
    initHandlers() {
        /** @type {?} */
        const _ = (/**
         * @return {?}
         */
        () => { });
        if (!this.audiostartHandler) {
            this.audiostartHandler = _;
        }
        if (!this.soundstartHandler) {
            this.soundstartHandler = _;
        }
        if (!this.speechstartHandler) {
            this.speechstartHandler = _;
        }
        if (!this.speechendHandler) {
            this.speechendHandler = _;
        }
        if (!this.soundendHandler) {
            this.soundendHandler = _;
        }
        if (!this.audioendHandler) {
            this.audioendHandler = _;
        }
        if (!this.resultHandler) {
            this.resultHandler = _;
        }
        if (!this.nomatchHandler) {
            this.nomatchHandler = _;
        }
        if (!this.errorHandler) {
            this.errorHandler = _;
        }
        if (!this.startHandler) {
            this.startHandler = _;
        }
        if (!this.endHandler) {
            this.endHandler = _;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initInternal() {
        // see setter methods
        this.grammars = this._grammars;
        this.lang = this._lang;
        this.continuous = this._continuous;
        this.interimResults = this._interimResults;
        this.maxAlternatives = this._maxAlternatives;
        this.serviceURI = this._serviceURI;
        this.internal.onaudiostart = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.audiostartHandler(e);
            this.ref.tick();
        });
        this.internal.onsoundstart = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.soundstartHandler(e);
            this.ref.tick();
        });
        this.internal.onspeechstart = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.speechstartHandler(e);
            this.ref.tick();
        });
        this.internal.onspeechend = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.speechendHandler(e);
            this.ref.tick();
        });
        this.internal.onsoundend = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.soundendHandler(e);
            this.ref.tick();
        });
        this.internal.onaudioend = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.audioendHandler(e);
            this.ref.tick();
        });
        this.internal.onresult = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.resultHandler(e);
            this.ref.tick();
        });
        this.internal.onnomatch = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.nomatchHandler(e);
            this.ref.tick();
        });
        this.internal.onerror = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.errorHandler(e);
            this.ref.tick();
        });
        this.internal.onstart = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.startHandler(e);
            this.ref.tick();
        });
        this.internal.onend = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.endHandler(e);
            this.ref.tick();
        });
    }
    // The onaudiostart property of the SpeechRecognition interface
    // represents an event handler that will run
    // when the user agent has started to capture audio
    // (when the audiostart event fires.)
    //
    // SpeechRecognitionインターフェイスのonaudiostartプロパティは、
    // ユーザーエージェントがオーディオのキャプチャを開始したとき
    // （audiostartイベントが発生したとき）に実行されるイベントハンドラを
    // 表します。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onaudiostart(handler) {
        this.audiostartHandler = handler;
    }
    // The onsoundstart property of the SpeechRecognition interface represents
    // an event handler that will run when any sound
    // — recognisable speech or not
    // — has been detected (when the soundstart event fires.)
    //
    // SpeechRecognitionインターフェイスのonsoundstartプロパティは、
    // サウンド認識可能な音声が検出されたときに実行されるイベントハンドラを表します
    // （サウンドスタートイベントが発生したとき）。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onsoundstart(handler) {
        this.soundstartHandler = handler;
    }
    // The onspeechstart property of the SpeechRecognition interface represents
    // an event handler that will run when sound recognised
    // by the speech recognition service as speech has been detected
    // (when the speechstart event fires.)
    //
    // SpeechRecognitionインターフェイスのonspeechstartプロパティは、
    // スピーチが検出されたとき（スピーチ開始イベントが発生したとき）に
    // 音声認識サービスによって認識されたサウンドが実行されるイベントハンドラを表します。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onspeechstart(handler) {
        this.speechstartHandler = handler;
    }
    // The onspeechend property of the SpeechRecognition interface represents
    // an event handler that will run when speech recognised
    // by the speech recognition service has stopped being detected
    // (when the speechend event fires.)
    //
    // SpeechRecognitionインターフェイスのonspeechendプロパティは、
    // 音声認識サービスによって認識された音声が検出されなくなったとき
    // （Speechendイベントが発生したとき）に実行されるイベントハンドラを表します。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onspeechend(handler) {
        this.speechendHandler = handler;
    }
    // The onsoundend property of the SpeechRecognition interface represents
    // an event handler that will run when any sound
    // — recognisable speech or not — has stopped being detected
    // (when the soundend event fires.)
    //
    // SpeechRecognitionインターフェイスのonsoundendプロパティは、
    // サウンド認識可能な音声が検出されなくなったときに実行されるイベントハンドラを表します
    // （サウンドエンドイベントが発生したとき）。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onsoundend(handler) {
        this.soundendHandler = handler;
    }
    // The onaudioend property of the SpeechRecognition interface represents
    // an event handler that will run
    // when the user agent has finished capturing audio
    // (when the audioend event fires.)
    //
    // SpeechRecognitionインターフェイスのonaudioendプロパティは、
    // ユーザーエージェントがオーディオのキャプチャを終了したとき
    // （オーディオエンドイベントが発生したとき）に実行されるイベントハンドラを表します。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onaudioend(handler) {
        this.audioendHandler = handler;
    }
    // The onresult property of the SpeechRecognition interface represents
    // an event handler that will run
    // when the speech recognition service returns a result
    // — a word or phrase has been positively recognized
    // and this has been communicated back to the app
    // (when the result event fires.)
    //
    // SpeechRecognitionインターフェイスのonresultプロパティは、
    // 音声認識サービスが結果を返すときに実行されるイベントハンドラを表します。
    // 単語やフレーズが確実に認識され、結果イベントが発生したときにアプリに返されます。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onresult(handler) {
        this.resultHandler = handler;
    }
    // The onnomatch property of the SpeechRecognition interface represents
    // an event handler that will run
    // when the speech recognition service returns
    // a final result with no significant recognition
    // (when the nomatch event fires.)
    //
    // This may involve some degree of recognition
    //  which doesn't meet or exceed the confidence threshold.
    //
    //
    // SpeechRecognitionインターフェイスのonnomatchプロパティは、
    // 音声認識サービスが重要な認識なしに（nomatchイベントが発生したとき）
    // 最終結果を返すときに実行されるイベントハンドラを表します。
    //
    // これには、ある程度の認識が必要であり、これは信頼限界を満たさないか、
    // 超えている。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onnomatch(handler) {
        this.nomatchHandler = handler;
    }
    // The onerror property of the SpeechRecognition interface represents
    // an event handler that will run
    // when a speech recognition error occurs
    // (when the error event fires.)
    //
    // SpeechRecognitionインターフェイスのonerrorプロパティは、
    // 音声認識エラーが発生したとき（エラーイベントが発生したとき）に
    // 実行されるイベントハンドラを表します。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onerror(handler) {
        this.errorHandler = handler;
    }
    // The onstart property of the SpeechRecognition interface represents
    // an event handler that will run when the speech
    // recognition service has begun listening
    // to incoming audio with intent to recognize grammars
    // associated with the current SpeechRecognition
    // (when the start event fires.)
    //
    //
    // SpeechRecognitionインターフェイスのonstartプロパティは、
    // 音声認識サービスが現在のSpeechRecognitionに関連付けられている文法を
    // 認識することを目的として着信オーディオを聴き始めたときに実行される
    // イベントハンドラを表します（開始イベントが発生したとき）。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onstart(handler) {
        this.startHandler = handler;
    }
    // The onend property of the SpeechRecognition interface represents
    // an event handler that will run when the speech recognition
    // service has disconnected (when the end event fires.)
    //
    // SpeechRecognitionインターフェイスのonendプロパティは、
    // 音声認識サービスが切断されたとき（終了イベントが発生したとき）に
    // 実行されるイベントハンドラを表します。
    /**
     * @param {?} handler
     * @return {?}
     */
    set onend(handler) {
        this.endHandler = handler;
    }
    // The start() method of the Web Speech API starts the speech recognition service
    // listening to incoming audio with intent to recognize grammars
    // associated with the current SpeechRecognition.
    //
    // Web Speech APIのstart（）メソッドは、現在のSpeechRecognitionに
    // 関連付けられた文法を認識することを目的として、
    // 着信音声を聴取する音声認識サービスを開始します。
    /**
     * @return {?}
     */
    start() {
        this.internal.start();
        this.ref.tick();
    }
    // The stop() method of the Web Speech API stops the speech recognition service
    // from listening to incoming audio, and attempts to return a SpeechRecognitionResult
    // using the audio captured so far.
    //
    // Web Speech APIのstop（）メソッドは、音声認識サービスが着信音声を聴取するのを停止し、
    // これまでに取得した音声を使用してSpeechRecognitionResultを返そうとします。
    /**
     * @return {?}
     */
    stop() {
        this.internal.stop();
        this.ref.tick();
    }
    // The abort() method of the Web Speech API stops the speech recognition service
    // from listening to incoming audio, and doesn't attempt to return
    // a SpeechRecognitionResult.
    //
    // Web Speech APIのabort（）メソッドは、音声認識サービスが着信オーディオを聴くのをやめ、
    // SpeechRecognitionResultを返そうとしません。
    /**
     * @return {?}
     */
    abort() {
        this.internal.abort();
        this.ref.tick();
    }
}
SpeechRecognitionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SpeechRecognitionService.ctorParameters = () => [
    { type: ApplicationRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionGrammars,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionLang,] }] },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionContinuous,] }] },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionInterimResults,] }] },
    { type: Number, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionMaxAlternatives,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionServiceUri,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionAudiostartHandler,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionSoundstartHandler,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionSpeechstartHandler,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionSpeechendHandler,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionSoundendHandler,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionAudioendHandler,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionResultHandler,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionNomatchHandler,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionErrorHandler,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionStartHandler,] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionEndHandler,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.ref;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.audiostartHandler;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.soundstartHandler;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.speechstartHandler;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.speechendHandler;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.soundendHandler;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.audioendHandler;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.resultHandler;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.nomatchHandler;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.errorHandler;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.startHandler;
    /**
     * @type {?}
     * @private
     */
    SpeechRecognitionService.prototype.endHandler;
}
//# sourceMappingURL=data:application/json;base64,