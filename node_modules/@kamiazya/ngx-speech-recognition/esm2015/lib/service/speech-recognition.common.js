/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class SpeechRecognitionCommon {
    /**
     * @param {?} _grammars
     * @param {?} _lang
     * @param {?} _continuous
     * @param {?} _interimResults
     * @param {?} _maxAlternatives
     * @param {?} _serviceURI
     */
    constructor(_grammars, _lang, _continuous, _interimResults, _maxAlternatives, _serviceURI) {
        this._grammars = _grammars;
        this._lang = _lang;
        this._continuous = _continuous;
        this._interimResults = _interimResults;
        this._maxAlternatives = _maxAlternatives;
        this._serviceURI = _serviceURI;
        this.internal = new SpeechRecognition();
    }
    /**
     * Property
     * @return {?}
     */
    // The grammars property of the SpeechRecognition interface returns and sets
    // a collection of SpeechGrammar objects
    // that represent the grammars that will be understood
    // by the current SpeechRecognition.
    //
    // SpeechRecognitionインターフェイスのgrammarsプロパティは、
    // 現在のSpeechRecognitionで認識される文法を表す
    // SpeechGrammarオブジェクトのコレクションを返して設定します。
    get grammars() {
        return this._grammars;
    }
    /**
     * @param {?} grammars
     * @return {?}
     */
    set grammars(grammars) {
        this._grammars = grammars;
        if (this._grammars !== undefined && this._grammars != null && this.internal) {
            this.internal.grammars = this._grammars;
        }
    }
    // The lang property of the SpeechRecognition interface returns
    // and sets the language of the current SpeechRecognition.
    // If not specified, this defaults to the HTML lang attribute value,
    // or the user agent's language setting if that isn't set either.
    //
    // SpeechRecognitionインターフェイスのlangプロパティは、
    // 現在のSpeechRecognitionの言語を返して設定します。
    // 指定されていない場合、これはデフォルトでHTMLのlang属性の値、
    // またはユーザエージェントの言語設定が設定されていない場合は
    // その値になります。
    /**
     * @return {?}
     */
    get lang() {
        return this._lang;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    set lang(lang) {
        this._lang = lang;
        if (this._lang !== undefined && this._lang != null && this.internal) {
            this.internal.lang = this._lang;
        }
    }
    // The continuous property of the SpeechRecognition interface controls
    // whether continuous results are returned for each recognition, or only a single result.
    //
    // SpeechRecognitionインターフェイスの連続プロパティは、
    // 認識結果ごとに連続した結果を返すか、単一の結果のみを返すかを制御します。
    /**
     * @return {?}
     */
    get continuous() {
        return this._continuous;
    }
    /**
     * @param {?} continuous
     * @return {?}
     */
    set continuous(continuous) {
        this._continuous = continuous;
        if (this._continuous !== undefined && this._continuous != null && this.internal) {
            this.internal.continuous = this._continuous;
        }
    }
    // The interimResults property of the SpeechRecognition interface controls
    // whether interim results should be returned (true)
    // or not (false.) Interim results are results that are not yet final
    // (e.g. the SpeechRecognitionResult.isFinal property is false.)
    //
    // SpeechRecognitionインターフェイスのinterimResultsプロパティは、
    // 中間結果を返すかどうか（true）、そうでないか（false）を制御します。
    // 中間結果は、最終段階ではない結果です（SpeechRecognitionResult.isFinalプロパティはfalseです）。
    /**
     * @return {?}
     */
    get interimResults() {
        return this._interimResults;
    }
    /**
     * @param {?} interimResults
     * @return {?}
     */
    set interimResults(interimResults) {
        this._interimResults = interimResults;
        if (this._interimResults !== undefined && this._interimResults != null && this.internal) {
            this.internal.interimResults = this._interimResults;
        }
    }
    // The maxAlternatives property of the SpeechRecognition interface sets
    // the maximum number of SpeechRecognitionAlternatives
    // provided per SpeechRecognitionResult.
    //
    // SpeechRecognitionインターフェイスのmaxAlternativesプロパティは、
    // SpeechRecognitionResultごとに提供される
    // SpeechRecognitionAlternativesの最大数を設定します。
    /**
     * @return {?}
     */
    get maxAlternatives() {
        return this._maxAlternatives;
    }
    /**
     * @param {?} maxAlternatives
     * @return {?}
     */
    set maxAlternatives(maxAlternatives) {
        this._maxAlternatives = maxAlternatives;
        if (this._maxAlternatives !== undefined && this._maxAlternatives != null && this.internal) {
            this.internal.maxAlternatives = this._maxAlternatives;
        }
    }
    // The serviceURI property of the SpeechRecognition interface specifies
    // the location of the speech recognition service
    // used by the current SpeechRecognition to handle
    // the actual recognition. The default is the user agent's
    // default speech service.
    //
    // SpeechRecognitionインターフェイスのserviceURIプロパティは、
    // 現在のSpeechRecognitionが実際の認識を処理するために使用する
    // 音声認識サービスの場所を指定します。
    // デフォルトはユーザエージェントのデフォルト音声サービスです。
    /**
     * @return {?}
     */
    get serviceURI() {
        return this._serviceURI;
    }
    /**
     * @param {?} serviceURI
     * @return {?}
     */
    set serviceURI(serviceURI) {
        this._serviceURI = serviceURI;
        if (this._serviceURI !== undefined && this._serviceURI != null && this.internal) {
            this.internal.serviceURI = this._serviceURI;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    SpeechRecognitionCommon.prototype.internal;
    /**
     * @type {?}
     * @protected
     */
    SpeechRecognitionCommon.prototype._grammars;
    /**
     * @type {?}
     * @protected
     */
    SpeechRecognitionCommon.prototype._lang;
    /**
     * @type {?}
     * @protected
     */
    SpeechRecognitionCommon.prototype._continuous;
    /**
     * @type {?}
     * @protected
     */
    SpeechRecognitionCommon.prototype._interimResults;
    /**
     * @type {?}
     * @protected
     */
    SpeechRecognitionCommon.prototype._maxAlternatives;
    /**
     * @type {?}
     * @protected
     */
    SpeechRecognitionCommon.prototype._serviceURI;
}
//# sourceMappingURL=data:application/json;base64,