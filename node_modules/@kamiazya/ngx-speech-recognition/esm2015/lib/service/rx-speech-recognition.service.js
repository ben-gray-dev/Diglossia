/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Observable, pipe, Subject, BehaviorSubject, } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { Injectable, ApplicationRef, Inject, Optional } from '@angular/core';
import { SpeechRecognitionGrammars, SpeechRecognitionLang, SpeechRecognitionContinuous, SpeechRecognitionInterimResults, SpeechRecognitionMaxAlternatives, SpeechRecognitionServiceUri, } from './speech-recognition.token';
import { SpeechRecognitionCommon, } from './speech-recognition.common';
/** @type {?} */
const onType = (/**
 * @param {?} type
 * @return {?}
 */
(type) => {
    return filter((/**
     * @param {?} e
     * @return {?}
     */
    (e) => (e.type === type)));
});
const ɵ0 = onType;
/** @type {?} */
export const resultList = pipe(onType('result'), map((/**
 * @param {?} e
 * @return {?}
 */
(e) => e.results)));
export class RxSpeechRecognitionService extends SpeechRecognitionCommon {
    /**
     * @param {?} ref
     * @param {?} grammars
     * @param {?} lang
     * @param {?} continuous
     * @param {?} interimResults
     * @param {?} maxAlternatives
     * @param {?} serviceURI
     */
    constructor(ref, grammars, lang, continuous, interimResults, maxAlternatives, serviceURI) {
        super(grammars, lang, continuous, interimResults, maxAlternatives, serviceURI);
        this.ref = ref;
        this.proxy$ = new Subject();
        this._started$ = new BehaviorSubject(false);
        this.initInternal();
    }
    /**
     * @return {?}
     */
    get $() {
        return (/** @type {?} */ (this.proxy$));
    }
    /**
     * @return {?}
     */
    get started$() {
        return (/** @type {?} */ (this._started$));
    }
    /**
     * @private
     * @return {?}
     */
    initInternal() {
        // set handlers
        /** @type {?} */
        const handler = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.proxy$.next(e);
            this.ref.tick();
        });
        /** @type {?} */
        const errHandler = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.proxy$.error(e);
            this.ref.tick();
        });
        this.internal.onaudiostart = handler;
        this.internal.onsoundstart = handler;
        this.internal.onspeechstart = handler;
        this.internal.onspeechend = handler;
        this.internal.onsoundend = handler;
        this.internal.onaudioend = handler;
        this.internal.onresult = handler;
        this.internal.onnomatch = handler;
        this.internal.onerror = errHandler;
        this.internal.onstart = handler;
        this.internal.onend = handler;
        // see setter methods
        this.grammars = this._grammars;
        this.lang = this._lang;
        this.continuous = this._continuous;
        this.interimResults = this._interimResults;
        this.maxAlternatives = this._maxAlternatives;
        this.serviceURI = this._serviceURI;
        this.proxy$.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            switch (e.type) {
                case 'start':
                    this._started$.next(true);
                    break;
                case 'end':
                    this._started$.next(false);
                    break;
            }
        }));
    }
    // The listen() method aims to recognize the grammar associated with the current SpeechRecognition,
    // Observable is returned for handling voice recognition service listening to incoming voice.
    // When you subscrive the return value, listening begins and listening ends when an end event occurs.
    // Interrupt listening by unsubscribing in the middle.
    //
    // listen() メソッドは、現在のSpeechRecognitionに
    // 関連付けられた文法を認識することを目的として、
    // 着信音声を聴取する音声認識サービスを扱うためのObservableが返されます。
    // 返り値をsubscriveすると聴取が開始され、endのイベントが発生すると聴取を終了します。
    // 途中でunsbscriveすることで聴取を中断します。
    /**
     * @return {?}
     */
    listen() {
        /** @type {?} */
        const listener = new Observable((/**
         * @param {?} ovserver
         * @return {?}
         */
        (ovserver) => {
            // create subscriotion
            /** @type {?} */
            const subscriotion = this.proxy$.subscribe({
                next: (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    ovserver.next(e);
                    if (e.type && e.type === 'end') {
                        this.internal.stop();
                        ovserver.complete();
                        subscriotion.unsubscribe();
                    }
                }),
                error: (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => ovserver.error(e)),
            });
            // Speech Recognition start
            this.internal.start();
            return (/**
             * @return {?}
             */
            () => {
                this.internal.abort();
                subscriotion.unsubscribe();
            });
        }));
        return listener;
    }
}
RxSpeechRecognitionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RxSpeechRecognitionService.ctorParameters = () => [
    { type: ApplicationRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionGrammars,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionLang,] }] },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionContinuous,] }] },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionInterimResults,] }] },
    { type: Number, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionMaxAlternatives,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SpeechRecognitionServiceUri,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RxSpeechRecognitionService.prototype.proxy$;
    /**
     * @type {?}
     * @private
     */
    RxSpeechRecognitionService.prototype._started$;
    /**
     * @type {?}
     * @private
     */
    RxSpeechRecognitionService.prototype.ref;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,