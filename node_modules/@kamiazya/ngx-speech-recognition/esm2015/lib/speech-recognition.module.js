/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Inject, PLATFORM_ID, } from '@angular/core';
import { isPlatformBrowser, } from '@angular/common';
import { SpeechRecognitionGrammars, SpeechRecognitionLang, SpeechRecognitionContinuous, SpeechRecognitionInterimResults, SpeechRecognitionMaxAlternatives, SpeechRecognitionServiceUri, SpeechRecognitionAudiostartHandler, SpeechRecognitionSoundstartHandler, SpeechRecognitionSpeechstartHandler, SpeechRecognitionSpeechendHandler, SpeechRecognitionSoundendHandler, SpeechRecognitionAudioendHandler, SpeechRecognitionResultHandler, SpeechRecognitionNomatchHandler, SpeechRecognitionErrorHandler, SpeechRecognitionStartHandler, SpeechRecognitionEndHandler, } from './service/speech-recognition.token';
import { RxSpeechRecognitionService, } from './service/rx-speech-recognition.service';
import { SpeechRecognitionService, } from './service/speech-recognition.service';
import { SPEECH_RECOGNITION_DEFAULT } from './speech-recognition.provider';
export class SpeechRecognitionModule {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        if (isPlatformBrowser(platformId) === false) {
            throw new Error('SpeechRecognitionModule: it run on PlatformBrowser.');
        }
    }
    /**
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: SpeechRecognitionModule,
            providers: [
                // tslint:disable:max-line-length
                ...(config.grammars !== undefined && config.grammars != null ? [{ useValue: config.grammars, provide: SpeechRecognitionGrammars }] : []),
                ...(config.lang !== undefined && config.lang != null ? [{ useValue: config.lang, provide: SpeechRecognitionLang }] : []),
                ...(config.continuous !== undefined && config.continuous != null ? [{ useValue: config.continuous, provide: SpeechRecognitionContinuous }] : []),
                ...(config.interimResults !== undefined && config.interimResults != null ? [{ useValue: config.interimResults, provide: SpeechRecognitionInterimResults }] : []),
                ...(config.maxAlternatives !== undefined && config.maxAlternatives != null ? [{ useValue: config.maxAlternatives, provide: SpeechRecognitionMaxAlternatives }] : []),
                ...(config.serviceURI !== undefined && config.serviceURI != null ? [{ useValue: config.serviceURI, provide: SpeechRecognitionServiceUri }] : []),
                ...(config.onaudiostart instanceof Function ? [{ useValue: config.onaudiostart, provide: SpeechRecognitionAudiostartHandler }] : []),
                ...(config.onsoundstart instanceof Function ? [{ useValue: config.onsoundstart, provide: SpeechRecognitionSoundstartHandler }] : []),
                ...(config.onspeechstart instanceof Function ? [{ useValue: config.onspeechstart, provide: SpeechRecognitionSpeechstartHandler }] : []),
                ...(config.onspeechend instanceof Function ? [{ useValue: config.onspeechend, provide: SpeechRecognitionSpeechendHandler }] : []),
                ...(config.onsoundend instanceof Function ? [{ useValue: config.onsoundend, provide: SpeechRecognitionSoundendHandler }] : []),
                ...(config.onaudioend instanceof Function ? [{ useValue: config.onaudioend, provide: SpeechRecognitionAudioendHandler }] : []),
                ...(config.onresult instanceof Function ? [{ useValue: config.onresult, provide: SpeechRecognitionResultHandler }] : []),
                ...(config.onnomatch instanceof Function ? [{ useValue: config.onnomatch, provide: SpeechRecognitionNomatchHandler }] : []),
                ...(config.onerror instanceof Function ? [{ useValue: config.onerror, provide: SpeechRecognitionErrorHandler }] : []),
                ...(config.onstart instanceof Function ? [{ useValue: config.onstart, provide: SpeechRecognitionStartHandler }] : []),
                ...(config.onend instanceof Function ? [{ useValue: config.onend, provide: SpeechRecognitionEndHandler }] : []),
                { useClass: SpeechRecognitionService, provide: SpeechRecognitionService },
                { useClass: RxSpeechRecognitionService, provide: RxSpeechRecognitionService }
            ],
        };
    }
    /**
     * @param {?} config
     * @return {?}
     */
    static withConfig(config) {
        return {
            ngModule: SpeechRecognitionModule,
            providers: [
                // tslint:disable:max-line-length
                ...(config.grammars !== undefined && config.grammars != null ? [{ useValue: config.grammars, provide: SpeechRecognitionGrammars }] : []),
                ...(config.lang !== undefined && config.lang != null ? [{ useValue: config.lang, provide: SpeechRecognitionLang }] : []),
                ...(config.continuous !== undefined && config.continuous != null ? [{ useValue: config.continuous, provide: SpeechRecognitionContinuous }] : []),
                ...(config.interimResults !== undefined && config.interimResults != null ? [{ useValue: config.interimResults, provide: SpeechRecognitionInterimResults }] : []),
                ...(config.maxAlternatives !== undefined && config.maxAlternatives != null ? [{ useValue: config.maxAlternatives, provide: SpeechRecognitionMaxAlternatives }] : []),
                ...(config.serviceURI !== undefined && config.serviceURI != null ? [{ useValue: config.serviceURI, provide: SpeechRecognitionServiceUri }] : []),
                ...(config.onaudiostart instanceof Function ? [{ useValue: config.onaudiostart, provide: SpeechRecognitionAudiostartHandler }] : []),
                ...(config.onsoundstart instanceof Function ? [{ useValue: config.onsoundstart, provide: SpeechRecognitionSoundstartHandler }] : []),
                ...(config.onspeechstart instanceof Function ? [{ useValue: config.onspeechstart, provide: SpeechRecognitionSpeechstartHandler }] : []),
                ...(config.onspeechend instanceof Function ? [{ useValue: config.onspeechend, provide: SpeechRecognitionSpeechendHandler }] : []),
                ...(config.onsoundend instanceof Function ? [{ useValue: config.onsoundend, provide: SpeechRecognitionSoundendHandler }] : []),
                ...(config.onaudioend instanceof Function ? [{ useValue: config.onaudioend, provide: SpeechRecognitionAudioendHandler }] : []),
                ...(config.onresult instanceof Function ? [{ useValue: config.onresult, provide: SpeechRecognitionResultHandler }] : []),
                ...(config.onnomatch instanceof Function ? [{ useValue: config.onnomatch, provide: SpeechRecognitionNomatchHandler }] : []),
                ...(config.onerror instanceof Function ? [{ useValue: config.onerror, provide: SpeechRecognitionErrorHandler }] : []),
                ...(config.onstart instanceof Function ? [{ useValue: config.onstart, provide: SpeechRecognitionStartHandler }] : []),
                ...(config.onend instanceof Function ? [{ useValue: config.onend, provide: SpeechRecognitionEndHandler }] : []),
            ]
        };
    }
}
SpeechRecognitionModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    SPEECH_RECOGNITION_DEFAULT,
                ],
            },] }
];
/** @nocollapse */
SpeechRecognitionModule.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWNoLXJlY29nbml0aW9uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrYW1pYXp5YS9uZ3gtc3BlZWNoLXJlY29nbml0aW9uLyIsInNvdXJjZXMiOlsibGliL3NwZWVjaC1yZWNvZ25pdGlvbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxRQUFRLEVBRVIsTUFBTSxFQUNOLFdBQVcsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQ0wsaUJBQWlCLEdBQ2xCLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUNMLHlCQUF5QixFQUN6QixxQkFBcUIsRUFDckIsMkJBQTJCLEVBQzNCLCtCQUErQixFQUMvQixnQ0FBZ0MsRUFDaEMsMkJBQTJCLEVBQzNCLGtDQUFrQyxFQUNsQyxrQ0FBa0MsRUFDbEMsbUNBQW1DLEVBQ25DLGlDQUFpQyxFQUNqQyxnQ0FBZ0MsRUFDaEMsZ0NBQWdDLEVBQ2hDLDhCQUE4QixFQUM5QiwrQkFBK0IsRUFDL0IsNkJBQTZCLEVBQzdCLDZCQUE2QixFQUM3QiwyQkFBMkIsR0FDNUIsTUFBTSxvQ0FBb0MsQ0FBQztBQUU1QyxPQUFPLEVBQ0wsMEJBQTBCLEdBQzNCLE1BQU0seUNBQXlDLENBQUM7QUFDakQsT0FBTyxFQUNMLHdCQUF3QixHQUN6QixNQUFNLHNDQUFzQyxDQUFDO0FBRzlDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBTzNFLE1BQU0sT0FBTyx1QkFBdUI7Ozs7SUFFbEMsWUFDdUIsVUFBa0I7UUFFdkMsSUFBSSxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1NBQ3hFO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQStCO1FBQzVDLE9BQU87WUFDTCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pD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QUFDLE1BQU0sQ0FBQyxPQUFPLFlBQVksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNySCxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssWUFBWSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDaEg7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBbkVGLFFBQVEsU0FBQztnQkFDUixTQUFTLEVBQUU7b0JBQ1QsMEJBQTBCO2lCQUMzQjthQUNGOzs7O3lDQUlJLE1BQU0sU0FBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTmdNb2R1bGUsXG4gIE1vZHVsZVdpdGhQcm92aWRlcnMsXG4gIEluamVjdCxcbiAgUExBVEZPUk1fSUQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICBpc1BsYXRmb3JtQnJvd3Nlcixcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHtcbiAgU3BlZWNoUmVjb2duaXRpb25HcmFtbWFycyxcbiAgU3BlZWNoUmVjb2duaXRpb25MYW5nLFxuICBTcGVlY2hSZWNvZ25pdGlvbkNvbnRpbnVvdXMsXG4gIFNwZWVjaFJlY29nbml0aW9uSW50ZXJpbVJlc3VsdHMsXG4gIFNwZWVjaFJlY29nbml0aW9uTWF4QWx0ZXJuYXRpdmVzLFxuICBTcGVlY2hSZWNvZ25pdGlvblNlcnZpY2VVcmksXG4gIFNwZWVjaFJlY29nbml0aW9uQXVkaW9zdGFydEhhbmRsZXIsXG4gIFNwZWVjaFJlY29nbml0aW9uU291bmRzdGFydEhhbmRsZXIsXG4gIFNwZWVjaFJlY29nbml0aW9uU3BlZWNoc3RhcnRIYW5kbGVyLFxuICBTcGVlY2hSZWNvZ25pdGlvblNwZWVjaGVuZEhhbmRsZXIsXG4gIFNwZWVjaFJlY29nbml0aW9uU291bmRlbmRIYW5kbGVyLFxuICBTcGVlY2hSZWNvZ25pdGlvbkF1ZGlvZW5kSGFuZGxlcixcbiAgU3BlZWNoUmVjb2duaXRpb25SZXN1bHRIYW5kbGVyLFxuICBTcGVlY2hSZWNvZ25pdGlvbk5vbWF0Y2hIYW5kbGVyLFxuICBTcGVlY2hSZWNvZ25pdGlvbkVycm9ySGFuZGxlcixcbiAgU3BlZWNoUmVjb2duaXRpb25TdGFydEhhbmRsZXIsXG4gIFNwZWVjaFJlY29nbml0aW9uRW5kSGFuZGxlcixcbn0gZnJvbSAnLi9zZXJ2aWNlL3NwZWVjaC1yZWNvZ25pdGlvbi50b2tlbic7XG5cbmltcG9ydCB7XG4gIFJ4U3BlZWNoUmVjb2duaXRpb25TZXJ2aWNlLFxufSBmcm9tICcuL3NlcnZpY2Uvcngtc3BlZWNoLXJlY29nbml0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgU3BlZWNoUmVjb2duaXRpb25TZXJ2aWNlLFxufSBmcm9tICcuL3NlcnZpY2Uvc3BlZWNoLXJlY29nbml0aW9uLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTcGVlY2hSZWNvZ25pdGlvbkNvbmZpZyB9IGZyb20gJy4vc3BlZWNoLXJlY29nbml0aW9uLmNvbmZpZyc7XG5pbXBvcnQgeyBTUEVFQ0hfUkVDT0dOSVRJT05fREVGQVVMVCB9IGZyb20gJy4vc3BlZWNoLXJlY29nbml0aW9uLnByb3ZpZGVyJztcblxuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgU1BFRUNIX1JFQ09HTklUSU9OX0RFRkFVTFQsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFNwZWVjaFJlY29nbml0aW9uTW9kdWxlIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBzdHJpbmdcbiAgKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtSWQpID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTcGVlY2hSZWNvZ25pdGlvbk1vZHVsZTogaXQgcnVuIG9uIFBsYXRmb3JtQnJvd3Nlci4nKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IFNwZWVjaFJlY29nbml0aW9uQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBTcGVlY2hSZWNvZ25pdGlvbk1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGhcbiAgICAgICAgLi4uKGNvbmZpZy5ncmFtbWFycyAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZy5ncmFtbWFycyAhPSBudWxsID8gW3sgdXNlVmFsdWU6IGNvbmZpZy5ncmFtbWFycywgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25HcmFtbWFycyB9XSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbmZpZy5sYW5nICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLmxhbmcgIT0gbnVsbCA/IFt7IHVzZVZhbHVlOiBjb25maWcubGFuZywgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25MYW5nIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLmNvbnRpbnVvdXMgIT09IHVuZGVmaW5lZCAmJiBjb25maWcuY29udGludW91cyAhPSBudWxsID8gW3sgdXNlVmFsdWU6IGNvbmZpZy5jb250aW51b3VzLCBwcm92aWRlOiBTcGVlY2hSZWNvZ25pdGlvbkNvbnRpbnVvdXMgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcuaW50ZXJpbVJlc3VsdHMgIT09IHVuZGVmaW5lZCAmJiBjb25maWcuaW50ZXJpbVJlc3VsdHMgIT0gbnVsbCA/IFt7IHVzZVZhbHVlOiBjb25maWcuaW50ZXJpbVJlc3VsdHMsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uSW50ZXJpbVJlc3VsdHMgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcubWF4QWx0ZXJuYXRpdmVzICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLm1heEFsdGVybmF0aXZlcyAhPSBudWxsID8gW3sgdXNlVmFsdWU6IGNvbmZpZy5tYXhBbHRlcm5hdGl2ZXMsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uTWF4QWx0ZXJuYXRpdmVzIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLnNlcnZpY2VVUkkgIT09IHVuZGVmaW5lZCAmJiBjb25maWcuc2VydmljZVVSSSAhPSBudWxsID8gW3sgdXNlVmFsdWU6IGNvbmZpZy5zZXJ2aWNlVVJJLCBwcm92aWRlOiBTcGVlY2hSZWNvZ25pdGlvblNlcnZpY2VVcmkgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcub25hdWRpb3N0YXJ0IGluc3RhbmNlb2YgRnVuY3Rpb24gPyBbeyB1c2VWYWx1ZTogY29uZmlnLm9uYXVkaW9zdGFydCwgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25BdWRpb3N0YXJ0SGFuZGxlciB9XSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbmZpZy5vbnNvdW5kc3RhcnQgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IFt7IHVzZVZhbHVlOiBjb25maWcub25zb3VuZHN0YXJ0LCBwcm92aWRlOiBTcGVlY2hSZWNvZ25pdGlvblNvdW5kc3RhcnRIYW5kbGVyIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLm9uc3BlZWNoc3RhcnQgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IFt7IHVzZVZhbHVlOiBjb25maWcub25zcGVlY2hzdGFydCwgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25TcGVlY2hzdGFydEhhbmRsZXIgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcub25zcGVlY2hlbmQgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IFt7IHVzZVZhbHVlOiBjb25maWcub25zcGVlY2hlbmQsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uU3BlZWNoZW5kSGFuZGxlciB9XSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbmZpZy5vbnNvdW5kZW5kIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBbeyB1c2VWYWx1ZTogY29uZmlnLm9uc291bmRlbmQsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uU291bmRlbmRIYW5kbGVyIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLm9uYXVkaW9lbmQgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IFt7IHVzZVZhbHVlOiBjb25maWcub25hdWRpb2VuZCwgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25BdWRpb2VuZEhhbmRsZXIgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcub25yZXN1bHQgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IFt7IHVzZVZhbHVlOiBjb25maWcub25yZXN1bHQsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uUmVzdWx0SGFuZGxlciB9XSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbmZpZy5vbm5vbWF0Y2ggaW5zdGFuY2VvZiBGdW5jdGlvbiA/IFt7IHVzZVZhbHVlOiBjb25maWcub25ub21hdGNoLCBwcm92aWRlOiBTcGVlY2hSZWNvZ25pdGlvbk5vbWF0Y2hIYW5kbGVyIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLm9uZXJyb3IgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IFt7IHVzZVZhbHVlOiBjb25maWcub25lcnJvciwgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25FcnJvckhhbmRsZXIgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcub25zdGFydCBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gW3sgdXNlVmFsdWU6IGNvbmZpZy5vbnN0YXJ0LCBwcm92aWRlOiBTcGVlY2hSZWNvZ25pdGlvblN0YXJ0SGFuZGxlciB9XSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbmZpZy5vbmVuZCBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gW3sgdXNlVmFsdWU6IGNvbmZpZy5vbmVuZCwgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25FbmRIYW5kbGVyIH1dIDogW10pLFxuICAgICAgICB7IHVzZUNsYXNzOiBTcGVlY2hSZWNvZ25pdGlvblNlcnZpY2UsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uU2VydmljZSB9LFxuICAgICAgICB7IHVzZUNsYXNzOiBSeFNwZWVjaFJlY29nbml0aW9uU2VydmljZSwgcHJvdmlkZTogUnhTcGVlY2hSZWNvZ25pdGlvblNlcnZpY2UgfVxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHdpdGhDb25maWcoY29uZmlnOiBTcGVlY2hSZWNvZ25pdGlvbkNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogU3BlZWNoUmVjb2duaXRpb25Nb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICAgIC4uLihjb25maWcuZ3JhbW1hcnMgIT09IHVuZGVmaW5lZCAmJiBjb25maWcuZ3JhbW1hcnMgIT0gbnVsbCA/IFt7IHVzZVZhbHVlOiBjb25maWcuZ3JhbW1hcnMsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uR3JhbW1hcnMgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcubGFuZyAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZy5sYW5nICE9IG51bGwgPyBbeyB1c2VWYWx1ZTogY29uZmlnLmxhbmcsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uTGFuZyB9XSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbmZpZy5jb250aW51b3VzICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLmNvbnRpbnVvdXMgIT0gbnVsbCA/IFt7IHVzZVZhbHVlOiBjb25maWcuY29udGludW91cywgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25Db250aW51b3VzIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLmludGVyaW1SZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLmludGVyaW1SZXN1bHRzICE9IG51bGwgPyBbeyB1c2VWYWx1ZTogY29uZmlnLmludGVyaW1SZXN1bHRzLCBwcm92aWRlOiBTcGVlY2hSZWNvZ25pdGlvbkludGVyaW1SZXN1bHRzIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLm1heEFsdGVybmF0aXZlcyAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZy5tYXhBbHRlcm5hdGl2ZXMgIT0gbnVsbCA/IFt7IHVzZVZhbHVlOiBjb25maWcubWF4QWx0ZXJuYXRpdmVzLCBwcm92aWRlOiBTcGVlY2hSZWNvZ25pdGlvbk1heEFsdGVybmF0aXZlcyB9XSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbmZpZy5zZXJ2aWNlVVJJICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLnNlcnZpY2VVUkkgIT0gbnVsbCA/IFt7IHVzZVZhbHVlOiBjb25maWcuc2VydmljZVVSSSwgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25TZXJ2aWNlVXJpIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLm9uYXVkaW9zdGFydCBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gW3sgdXNlVmFsdWU6IGNvbmZpZy5vbmF1ZGlvc3RhcnQsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uQXVkaW9zdGFydEhhbmRsZXIgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcub25zb3VuZHN0YXJ0IGluc3RhbmNlb2YgRnVuY3Rpb24gPyBbeyB1c2VWYWx1ZTogY29uZmlnLm9uc291bmRzdGFydCwgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25Tb3VuZHN0YXJ0SGFuZGxlciB9XSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbmZpZy5vbnNwZWVjaHN0YXJ0IGluc3RhbmNlb2YgRnVuY3Rpb24gPyBbeyB1c2VWYWx1ZTogY29uZmlnLm9uc3BlZWNoc3RhcnQsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uU3BlZWNoc3RhcnRIYW5kbGVyIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLm9uc3BlZWNoZW5kIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBbeyB1c2VWYWx1ZTogY29uZmlnLm9uc3BlZWNoZW5kLCBwcm92aWRlOiBTcGVlY2hSZWNvZ25pdGlvblNwZWVjaGVuZEhhbmRsZXIgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcub25zb3VuZGVuZCBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gW3sgdXNlVmFsdWU6IGNvbmZpZy5vbnNvdW5kZW5kLCBwcm92aWRlOiBTcGVlY2hSZWNvZ25pdGlvblNvdW5kZW5kSGFuZGxlciB9XSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbmZpZy5vbmF1ZGlvZW5kIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBbeyB1c2VWYWx1ZTogY29uZmlnLm9uYXVkaW9lbmQsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uQXVkaW9lbmRIYW5kbGVyIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLm9ucmVzdWx0IGluc3RhbmNlb2YgRnVuY3Rpb24gPyBbeyB1c2VWYWx1ZTogY29uZmlnLm9ucmVzdWx0LCBwcm92aWRlOiBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdEhhbmRsZXIgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcub25ub21hdGNoIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBbeyB1c2VWYWx1ZTogY29uZmlnLm9ubm9tYXRjaCwgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25Ob21hdGNoSGFuZGxlciB9XSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbmZpZy5vbmVycm9yIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBbeyB1c2VWYWx1ZTogY29uZmlnLm9uZXJyb3IsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uRXJyb3JIYW5kbGVyIH1dIDogW10pLFxuICAgICAgICAuLi4oY29uZmlnLm9uc3RhcnQgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IFt7IHVzZVZhbHVlOiBjb25maWcub25zdGFydCwgcHJvdmlkZTogU3BlZWNoUmVjb2duaXRpb25TdGFydEhhbmRsZXIgfV0gOiBbXSksXG4gICAgICAgIC4uLihjb25maWcub25lbmQgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IFt7IHVzZVZhbHVlOiBjb25maWcub25lbmQsIHByb3ZpZGU6IFNwZWVjaFJlY29nbml0aW9uRW5kSGFuZGxlciB9XSA6IFtdKSxcbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=