{"version":3,"sources":["ng://@kamiazya/ngx-speech-recognition/lib/polifill.ts","ng://@kamiazya/ngx-speech-recognition/lib/service/speech-recognition.token.ts","node_modules/tslib/tslib.es6.js","ng://@kamiazya/ngx-speech-recognition/lib/service/speech-recognition.common.ts","ng://@kamiazya/ngx-speech-recognition/lib/service/rx-speech-recognition.service.ts","ng://@kamiazya/ngx-speech-recognition/lib/service/speech-recognition.service.ts","ng://@kamiazya/ngx-speech-recognition/lib/speech-recognition.provider.ts","ng://@kamiazya/ngx-speech-recognition/lib/speech-recognition.module.ts"],"names":["window","SpeechRecognitionGrammars","InjectionToken","SpeechRecognitionLang","SpeechRecognitionContinuous","SpeechRecognitionInterimResults","SpeechRecognitionMaxAlternatives","SpeechRecognitionServiceUri","SpeechRecognitionAudiostartHandler","SpeechRecognitionSoundstartHandler","SpeechRecognitionSpeechstartHandler","SpeechRecognitionSpeechendHandler","SpeechRecognitionSoundendHandler","SpeechRecognitionAudioendHandler","SpeechRecognitionResultHandler","SpeechRecognitionNomatchHandler","SpeechRecognitionErrorHandler","SpeechRecognitionStartHandler","SpeechRecognitionEndHandler","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","type","SpeechRecognitionCommon","_grammars","_lang","_continuous","_interimResults","_maxAlternatives","_serviceURI","internal","SpeechRecognition","defineProperty","grammars","undefined","lang","continuous","interimResults","maxAlternatives","serviceURI","resultList","pipe","filter","map","results","RxSpeechRecognitionService","_super","ref","_this","proxy$","Subject","_started$","BehaviorSubject","initInternal","tslib_1.__extends","handler","tick","onaudiostart","onsoundstart","onspeechstart","onspeechend","onsoundend","onaudioend","onresult","onnomatch","onerror","onstart","onend","subscribe","listen","Observable","ovserver","subscriotion","stop","complete","unsubscribe","start","abort","Injectable","ApplicationRef","Optional","Inject","args","SpeechRecognitionService","audiostartHandler","soundstartHandler","speechstartHandler","speechendHandler","soundendHandler","audioendHandler","resultHandler","nomatchHandler","errorHandler","startHandler","endHandler","initHandlers","_","SPEECH_RECOGNITION_DEFAULT","provide","useValue","SpeechRecognitionModule","platformId","isPlatformBrowser","Error","forRoot","config","ngModule","providers","Function","useClass","withConfig","NgModule","PLATFORM_ID"],"mappings":"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","sourcesContent":["if (window['webkitSpeechRecognition']) {\n  window['SpeechRecognition'] = window['webkitSpeechRecognition'];\n}\nif (window['webkitSpeechGrammarList']) {\n  window['SpeechGrammarList'] = window['webkitSpeechGrammarList'];\n}\n","import { InjectionToken } from '@angular/core';\n\nimport {\n  SpeechGrammarListType,\n} from '../adapter';\n\nexport const SpeechRecognitionGrammars = new InjectionToken<SpeechGrammarListType>('speech-recognition.grammars');\nexport const SpeechRecognitionLang = new InjectionToken<string>('speech-recognition.lang');\nexport const SpeechRecognitionContinuous = new InjectionToken<boolean>('speech-recognition.continuous');\nexport const SpeechRecognitionInterimResults = new InjectionToken<boolean>('speech-recognition.interimResults');\nexport const SpeechRecognitionMaxAlternatives = new InjectionToken<number>('speech-recognition.maxAlternatives');\nexport const SpeechRecognitionServiceUri = new InjectionToken<string>('speech-recognition.serviceURI');\nexport const SpeechRecognitionAudiostartHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onaudiostart');\nexport const SpeechRecognitionSoundstartHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onsoundstart');\nexport const SpeechRecognitionSpeechstartHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onspeechstart');\nexport const SpeechRecognitionSpeechendHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onspeechend');\nexport const SpeechRecognitionSoundendHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onsoundend');\nexport const SpeechRecognitionAudioendHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onaudioend');\nexport const SpeechRecognitionResultHandler = new InjectionToken<(ev: SpeechRecognitionEvent) => any>('speech-recognition.onresult');\nexport const SpeechRecognitionNomatchHandler = new InjectionToken<(ev: SpeechRecognitionEvent) => any>('speech-recognition.onnomatch');\nexport const SpeechRecognitionErrorHandler = new InjectionToken<(ev: SpeechRecognitionError) => any>('speech-recognition.onerror');\nexport const SpeechRecognitionStartHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onstart');\nexport const SpeechRecognitionEndHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onend');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n  SpeechGrammarListType,\n} from '../adapter';\n\nexport class SpeechRecognitionCommon {\n\n  protected internal: SpeechRecognition = new SpeechRecognition();\n\n  constructor(\n    protected _grammars: SpeechGrammarListType,\n    protected _lang: string,\n    protected _continuous: boolean,\n    protected _interimResults: boolean,\n    protected _maxAlternatives: number,\n    protected _serviceURI: string,\n  ) { }\n\n\n  /**\n   * Property\n   */\n\n\n  // The grammars property of the SpeechRecognition interface returns and sets\n  // a collection of SpeechGrammar objects\n  // that represent the grammars that will be understood\n  // by the current SpeechRecognition.\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®grammarsãã­ããã£ã¯ã\n  // ç¾å¨ã®SpeechRecognitionã§èªè­ãããææ³ãè¡¨ã\n  // SpeechGrammarãªãã¸ã§ã¯ãã®ã³ã¬ã¯ã·ã§ã³ãè¿ãã¦è¨­å®ãã¾ãã\n  get grammars(): SpeechGrammarListType {\n    return this._grammars;\n  }\n\n  set grammars(grammars: SpeechGrammarListType) {\n    this._grammars = grammars;\n    if (this._grammars !== undefined && this._grammars != null && this.internal) {\n      this.internal.grammars = this._grammars;\n    }\n  }\n\n  // The lang property of the SpeechRecognition interface returns\n  // and sets the language of the current SpeechRecognition.\n  // If not specified, this defaults to the HTML lang attribute value,\n  // or the user agent's language setting if that isn't set either.\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®langãã­ããã£ã¯ã\n  // ç¾å¨ã®SpeechRecognitionã®è¨èªãè¿ãã¦è¨­å®ãã¾ãã\n  // æå®ããã¦ããªãå ´åãããã¯ããã©ã«ãã§HTMLã®langå±æ§ã®å¤ã\n  // ã¾ãã¯ã¦ã¼ã¶ã¨ã¼ã¸ã§ã³ãã®è¨èªè¨­å®ãè¨­å®ããã¦ããªãå ´åã¯\n  // ãã®å¤ã«ãªãã¾ãã\n  get lang(): string {\n    return this._lang;\n  }\n\n  set lang(lang: string) {\n    this._lang = lang;\n    if (this._lang !== undefined && this._lang != null && this.internal) {\n      this.internal.lang = this._lang;\n    }\n  }\n\n  // The continuous property of the SpeechRecognition interface controls\n  // whether continuous results are returned for each recognition, or only a single result.\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®é£ç¶ãã­ããã£ã¯ã\n  // èªè­çµæãã¨ã«é£ç¶ããçµæãè¿ãããåä¸ã®çµæã®ã¿ãè¿ãããå¶å¾¡ãã¾ãã\n  get continuous(): boolean {\n    return this._continuous;\n  }\n\n  set continuous(continuous: boolean) {\n    this._continuous = continuous;\n    if (this._continuous !== undefined && this._continuous != null && this.internal) {\n      this.internal.continuous = this._continuous;\n    }\n  }\n\n  // The interimResults property of the SpeechRecognition interface controls\n  // whether interim results should be returned (true)\n  // or not (false.) Interim results are results that are not yet final\n  // (e.g. the SpeechRecognitionResult.isFinal property is false.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®interimResultsãã­ããã£ã¯ã\n  // ä¸­éçµæãè¿ããã©ããï¼trueï¼ãããã§ãªããï¼falseï¼ãå¶å¾¡ãã¾ãã\n  // ä¸­éçµæã¯ãæçµæ®µéã§ã¯ãªãçµæã§ãï¼SpeechRecognitionResult.isFinalãã­ããã£ã¯falseã§ãï¼ã\n  get interimResults(): boolean {\n    return this._interimResults;\n  }\n  set interimResults(interimResults: boolean) {\n    this._interimResults = interimResults;\n    if (this._interimResults !== undefined && this._interimResults != null && this.internal) {\n      this.internal.interimResults = this._interimResults;\n    }\n  }\n\n  // The maxAlternatives property of the SpeechRecognition interface sets\n  // the maximum number of SpeechRecognitionAlternatives\n  // provided per SpeechRecognitionResult.\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®maxAlternativesãã­ããã£ã¯ã\n  // SpeechRecognitionResultãã¨ã«æä¾ããã\n  // SpeechRecognitionAlternativesã®æå¤§æ°ãè¨­å®ãã¾ãã\n  get maxAlternatives(): number {\n    return this._maxAlternatives;\n  }\n  set maxAlternatives(maxAlternatives: number) {\n    this._maxAlternatives = maxAlternatives;\n    if (this._maxAlternatives !== undefined && this._maxAlternatives != null && this.internal) {\n      this.internal.maxAlternatives = this._maxAlternatives;\n    }\n  }\n\n  // The serviceURI property of the SpeechRecognition interface specifies\n  // the location of the speech recognition service\n  // used by the current SpeechRecognition to handle\n  // the actual recognition. The default is the user agent's\n  // default speech service.\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®serviceURIãã­ããã£ã¯ã\n  // ç¾å¨ã®SpeechRecognitionãå®éã®èªè­ãå¦çããããã«ä½¿ç¨ãã\n  // é³å£°èªè­ãµã¼ãã¹ã®å ´æãæå®ãã¾ãã\n  // ããã©ã«ãã¯ã¦ã¼ã¶ã¨ã¼ã¸ã§ã³ãã®ããã©ã«ãé³å£°ãµã¼ãã¹ã§ãã\n  get serviceURI(): string {\n    return this._serviceURI;\n  }\n  set serviceURI(serviceURI: string) {\n    this._serviceURI = serviceURI;\n    if (this._serviceURI !== undefined && this._serviceURI != null && this.internal) {\n      this.internal.serviceURI = this._serviceURI;\n    }\n  }\n\n}\n","import {\n  Observable,\n  pipe,\n  UnaryFunction,\n  Subject,\n  BehaviorSubject,\n} from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { Injectable, ApplicationRef, Inject, Optional } from '@angular/core';\n\nimport {\n  SpeechRecognitionGrammars,\n  SpeechRecognitionLang,\n  SpeechRecognitionContinuous,\n  SpeechRecognitionInterimResults,\n  SpeechRecognitionMaxAlternatives,\n  SpeechRecognitionServiceUri,\n} from './speech-recognition.token';\n\nimport {\n  SpeechGrammarListType,\n  SpeechRecognitionServiceEvent,\n} from '../adapter';\n\nimport {\n  SpeechRecognitionCommon,\n} from './speech-recognition.common';\n\nconst onType = (type: string) => {\n  return filter((e: SpeechRecognitionServiceEvent) => (e.type === type));\n};\n\nexport const resultList: UnaryFunction<Observable<SpeechRecognitionEvent>, Observable<SpeechRecognitionResultList>> = pipe(\n  onType('result'),\n  map((e: SpeechRecognitionEvent): SpeechRecognitionResultList => e.results),\n);\n\n@Injectable()\nexport class RxSpeechRecognitionService extends SpeechRecognitionCommon {\n\n  private proxy$: Subject<SpeechRecognitionServiceEvent> = new Subject();\n\n  private _started$ = new BehaviorSubject<boolean>(false);\n\n  get $(): Observable<SpeechRecognitionServiceEvent> {\n    return this.proxy$ as Observable<SpeechRecognitionServiceEvent>;\n  }\n\n  get started$(): Observable<boolean> {\n    return this._started$ as Observable<boolean>;\n  }\n\n  constructor(\n    private ref: ApplicationRef,\n\n    @Optional() @Inject(SpeechRecognitionGrammars)\n    grammars: SpeechGrammarListType,\n\n    @Optional() @Inject(SpeechRecognitionLang)\n    lang: string,\n\n    @Optional() @Inject(SpeechRecognitionContinuous)\n    continuous: boolean,\n\n    @Optional() @Inject(SpeechRecognitionInterimResults)\n    interimResults: boolean,\n\n    @Optional() @Inject(SpeechRecognitionMaxAlternatives)\n    maxAlternatives: number,\n\n    @Optional() @Inject(SpeechRecognitionServiceUri)\n    serviceURI: string,\n  ) {\n    super(grammars, lang, continuous, interimResults, maxAlternatives, serviceURI);\n    this.initInternal();\n  }\n\n  private initInternal() {\n    // set handlers\n    const handler = (e) => {\n      this.proxy$.next(e);\n      this.ref.tick();\n    };\n    const errHandler = (e) => {\n      this.proxy$.error(e);\n      this.ref.tick();\n    };\n    this.internal.onaudiostart = handler;\n    this.internal.onsoundstart = handler;\n    this.internal.onspeechstart = handler;\n\n    this.internal.onspeechend = handler;\n    this.internal.onsoundend = handler;\n    this.internal.onaudioend = handler;\n\n    this.internal.onresult = handler;\n    this.internal.onnomatch = handler;\n    this.internal.onerror = errHandler;\n\n    this.internal.onstart = handler;\n    this.internal.onend = handler;\n\n    // see setter methods\n    this.grammars = this._grammars;\n    this.lang = this._lang;\n    this.continuous = this._continuous;\n    this.interimResults = this._interimResults;\n    this.maxAlternatives = this._maxAlternatives;\n    this.serviceURI = this._serviceURI;\n\n    this.proxy$.subscribe((e) => {\n      switch (e.type) {\n        case 'start':\n          this._started$.next(true);\n          break;\n        case 'end':\n          this._started$.next(false);\n          break;\n      }\n    });\n  }\n\n  // The listen() method aims to recognize the grammar associated with the current SpeechRecognition,\n  // Observable is returned for handling voice recognition service listening to incoming voice.\n  // When you subscrive the return value, listening begins and listening ends when an end event occurs.\n  // Interrupt listening by unsubscribing in the middle.\n  //\n  // listen() ã¡ã½ããã¯ãç¾å¨ã®SpeechRecognitionã«\n  // é¢é£ä»ããããææ³ãèªè­ãããã¨ãç®çã¨ãã¦ã\n  // çä¿¡é³å£°ãè´åããé³å£°èªè­ãµã¼ãã¹ãæ±ãããã®Observableãè¿ããã¾ãã\n  // è¿ãå¤ãsubscriveããã¨è´åãéå§ãããendã®ã¤ãã³ããçºçããã¨è´åãçµäºãã¾ãã\n  // éä¸­ã§unsbscriveãããã¨ã§è´åãä¸­æ­ãã¾ãã\n  public listen(): Observable<SpeechRecognitionServiceEvent> {\n\n    const listener = new Observable<SpeechRecognitionServiceEvent>((ovserver) => {\n      // create subscriotion\n      const subscriotion = this.proxy$.subscribe({\n        next: (e) => {\n          ovserver.next(e);\n\n          if (e.type && e.type === 'end') {\n            this.internal.stop();\n            ovserver.complete();\n            subscriotion.unsubscribe();\n          }\n        },\n        error: (e) => ovserver.error(e),\n      });\n\n      // Speech Recognition start\n      this.internal.start();\n\n      return () => {\n        this.internal.abort();\n        subscriotion.unsubscribe();\n      };\n    });\n\n    return listener;\n  }\n\n}\n","import {\n  Injectable,\n  ApplicationRef,\n  Inject,\n  Optional,\n} from '@angular/core';\n\nimport {\n  SpeechRecognitionGrammars,\n  SpeechRecognitionLang,\n  SpeechRecognitionContinuous,\n  SpeechRecognitionInterimResults,\n  SpeechRecognitionMaxAlternatives,\n  SpeechRecognitionServiceUri,\n  SpeechRecognitionAudiostartHandler,\n  SpeechRecognitionSoundstartHandler,\n  SpeechRecognitionSpeechstartHandler,\n  SpeechRecognitionSpeechendHandler,\n  SpeechRecognitionSoundendHandler,\n  SpeechRecognitionAudioendHandler,\n  SpeechRecognitionResultHandler,\n  SpeechRecognitionNomatchHandler,\n  SpeechRecognitionErrorHandler,\n  SpeechRecognitionStartHandler,\n  SpeechRecognitionEndHandler,\n} from './speech-recognition.token';\n\nimport {\n  SpeechGrammarListType,\n} from '../adapter';\n\nimport {\n  SpeechRecognitionCommon,\n} from './speech-recognition.common';\n\n// @dynamic\n@Injectable()\n/**\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API\n */\nexport class SpeechRecognitionService extends SpeechRecognitionCommon {\n\n  private initHandlers() {\n    const _ = () => { };\n    if (!this.audiostartHandler) { this.audiostartHandler = _; }\n    if (!this.soundstartHandler) { this.soundstartHandler = _; }\n    if (!this.speechstartHandler) { this.speechstartHandler = _; }\n    if (!this.speechendHandler) { this.speechendHandler = _; }\n    if (!this.soundendHandler) { this.soundendHandler = _; }\n    if (!this.audioendHandler) { this.audioendHandler = _; }\n    if (!this.resultHandler) { this.resultHandler = _; }\n    if (!this.nomatchHandler) { this.nomatchHandler = _; }\n    if (!this.errorHandler) { this.errorHandler = _; }\n    if (!this.startHandler) { this.startHandler = _; }\n    if (!this.endHandler) { this.endHandler = _; }\n  }\n\n  private initInternal() {\n    // see setter methods\n    this.grammars = this._grammars;\n    this.lang = this._lang;\n    this.continuous = this._continuous;\n    this.interimResults = this._interimResults;\n    this.maxAlternatives = this._maxAlternatives;\n    this.serviceURI = this._serviceURI;\n\n    this.internal.onaudiostart = (e: Event) => {\n      this.audiostartHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onsoundstart = (e: Event) => {\n      this.soundstartHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onspeechstart = (e: Event) => {\n      this.speechstartHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onspeechend = (e: Event) => {\n      this.speechendHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onsoundend = (e: Event) => {\n      this.soundendHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onaudioend = (e: Event) => {\n      this.audioendHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onresult = (e: SpeechRecognitionEvent) => {\n      this.resultHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onnomatch = (e: SpeechRecognitionEvent) => {\n      this.nomatchHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onerror = (e: SpeechRecognitionError) => {\n      this.errorHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onstart = (e: Event) => {\n      this.startHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onend = (e: Event) => {\n      this.endHandler(e);\n      this.ref.tick();\n    };\n  }\n\n\n  constructor(\n    private ref: ApplicationRef,\n\n    @Optional() @Inject(SpeechRecognitionGrammars)\n    grammars: SpeechGrammarListType,\n\n    @Optional() @Inject(SpeechRecognitionLang)\n    lang: string,\n\n    @Optional() @Inject(SpeechRecognitionContinuous)\n    continuous: boolean,\n\n    @Optional() @Inject(SpeechRecognitionInterimResults)\n    interimResults: boolean,\n\n    @Optional() @Inject(SpeechRecognitionMaxAlternatives)\n    maxAlternatives: number,\n\n    @Optional() @Inject(SpeechRecognitionServiceUri)\n    serviceURI: string,\n\n    @Optional() @Inject(SpeechRecognitionAudiostartHandler)\n    private audiostartHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionSoundstartHandler)\n    private soundstartHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionSpeechstartHandler)\n    private speechstartHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionSpeechendHandler)\n    private speechendHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionSoundendHandler)\n    private soundendHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionAudioendHandler)\n    private audioendHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionResultHandler)\n    private resultHandler: (ev: SpeechRecognitionEvent) => any,\n\n    @Optional() @Inject(SpeechRecognitionNomatchHandler)\n    private nomatchHandler: (ev: SpeechRecognitionEvent) => any,\n\n    @Optional() @Inject(SpeechRecognitionErrorHandler)\n    private errorHandler: (ev: SpeechRecognitionError) => any,\n\n    @Optional() @Inject(SpeechRecognitionStartHandler)\n    private startHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionEndHandler)\n    private endHandler: (ev: Event) => any\n  ) {\n    super(grammars, lang, continuous, interimResults, maxAlternatives, serviceURI);\n\n    this.initHandlers();\n\n    this.initInternal();\n  }\n\n\n  // The onaudiostart property of the SpeechRecognition interface\n  // represents an event handler that will run\n  // when the user agent has started to capture audio\n  // (when the audiostart event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onaudiostartãã­ããã£ã¯ã\n  // ã¦ã¼ã¶ã¼ã¨ã¼ã¸ã§ã³ãããªã¼ãã£ãªã®ã­ã£ããã£ãéå§ããã¨ã\n  // ï¼audiostartã¤ãã³ããçºçããã¨ãï¼ã«å®è¡ãããã¤ãã³ããã³ãã©ã\n  // è¡¨ãã¾ãã\n  set onaudiostart(handler: (ev: Event) => any) {\n    this.audiostartHandler = handler;\n  }\n\n  // The onsoundstart property of the SpeechRecognition interface represents\n  // an event handler that will run when any sound\n  // â recognisable speech or not\n  // â has been detected (when the soundstart event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onsoundstartãã­ããã£ã¯ã\n  // ãµã¦ã³ãèªè­å¯è½ãªé³å£°ãæ¤åºãããã¨ãã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ã\n  // ï¼ãµã¦ã³ãã¹ã¿ã¼ãã¤ãã³ããçºçããã¨ãï¼ã\n  set onsoundstart(handler: (ev: Event) => any) {\n    this.soundstartHandler = handler;\n  }\n\n  // The onspeechstart property of the SpeechRecognition interface represents\n  // an event handler that will run when sound recognised\n  // by the speech recognition service as speech has been detected\n  // (when the speechstart event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onspeechstartãã­ããã£ã¯ã\n  // ã¹ãã¼ããæ¤åºãããã¨ãï¼ã¹ãã¼ãéå§ã¤ãã³ããçºçããã¨ãï¼ã«\n  // é³å£°èªè­ãµã¼ãã¹ã«ãã£ã¦èªè­ããããµã¦ã³ããå®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  set onspeechstart(handler: (ev: Event) => any) {\n    this.speechstartHandler = handler;\n  }\n\n  // The onspeechend property of the SpeechRecognition interface represents\n  // an event handler that will run when speech recognised\n  // by the speech recognition service has stopped being detected\n  // (when the speechend event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onspeechendãã­ããã£ã¯ã\n  // é³å£°èªè­ãµã¼ãã¹ã«ãã£ã¦èªè­ãããé³å£°ãæ¤åºãããªããªã£ãã¨ã\n  // ï¼Speechendã¤ãã³ããçºçããã¨ãï¼ã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  set onspeechend(handler: (ev: Event) => any) {\n    this.speechendHandler = handler;\n  }\n\n  // The onsoundend property of the SpeechRecognition interface represents\n  // an event handler that will run when any sound\n  // â recognisable speech or not â has stopped being detected\n  // (when the soundend event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onsoundendãã­ããã£ã¯ã\n  // ãµã¦ã³ãèªè­å¯è½ãªé³å£°ãæ¤åºãããªããªã£ãã¨ãã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ã\n  // ï¼ãµã¦ã³ãã¨ã³ãã¤ãã³ããçºçããã¨ãï¼ã\n  set onsoundend(handler: (ev: Event) => any) {\n    this.soundendHandler = handler;\n  }\n\n  // The onaudioend property of the SpeechRecognition interface represents\n  // an event handler that will run\n  // when the user agent has finished capturing audio\n  // (when the audioend event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onaudioendãã­ããã£ã¯ã\n  // ã¦ã¼ã¶ã¼ã¨ã¼ã¸ã§ã³ãããªã¼ãã£ãªã®ã­ã£ããã£ãçµäºããã¨ã\n  // ï¼ãªã¼ãã£ãªã¨ã³ãã¤ãã³ããçºçããã¨ãï¼ã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  set onaudioend(handler: (ev: Event) => any) {\n    this.audioendHandler = handler;\n  }\n\n  // The onresult property of the SpeechRecognition interface represents\n  // an event handler that will run\n  // when the speech recognition service returns a result\n  // â a word or phrase has been positively recognized\n  // and this has been communicated back to the app\n  // (when the result event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onresultãã­ããã£ã¯ã\n  // é³å£°èªè­ãµã¼ãã¹ãçµæãè¿ãã¨ãã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  // åèªããã¬ã¼ãºãç¢ºå®ã«èªè­ãããçµæã¤ãã³ããçºçããã¨ãã«ã¢ããªã«è¿ããã¾ãã\n  set onresult(handler: (ev: SpeechRecognitionEvent) => any) {\n    this.resultHandler = handler;\n  }\n\n  // The onnomatch property of the SpeechRecognition interface represents\n  // an event handler that will run\n  // when the speech recognition service returns\n  // a final result with no significant recognition\n  // (when the nomatch event fires.)\n  //\n  // This may involve some degree of recognition\n  //  which doesn't meet or exceed the confidence threshold.\n  //\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onnomatchãã­ããã£ã¯ã\n  // é³å£°èªè­ãµã¼ãã¹ãéè¦ãªèªè­ãªãã«ï¼nomatchã¤ãã³ããçºçããã¨ãï¼\n  // æçµçµæãè¿ãã¨ãã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  //\n  // ããã«ã¯ãããç¨åº¦ã®èªè­ãå¿è¦ã§ãããããã¯ä¿¡é ¼éçãæºãããªããã\n  // è¶ãã¦ããã\n  set onnomatch(handler: (ev: SpeechRecognitionEvent) => any) {\n    this.nomatchHandler = handler;\n  }\n\n  // The onerror property of the SpeechRecognition interface represents\n  // an event handler that will run\n  // when a speech recognition error occurs\n  // (when the error event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onerrorãã­ããã£ã¯ã\n  // é³å£°èªè­ã¨ã©ã¼ãçºçããã¨ãï¼ã¨ã©ã¼ã¤ãã³ããçºçããã¨ãï¼ã«\n  // å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  set onerror(handler: (ev: SpeechRecognitionError) => any) {\n    this.errorHandler = handler;\n  }\n\n  // The onstart property of the SpeechRecognition interface represents\n  // an event handler that will run when the speech\n  // recognition service has begun listening\n  // to incoming audio with intent to recognize grammars\n  // associated with the current SpeechRecognition\n  // (when the start event fires.)\n  //\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onstartãã­ããã£ã¯ã\n  // é³å£°èªè­ãµã¼ãã¹ãç¾å¨ã®SpeechRecognitionã«é¢é£ä»ãããã¦ããææ³ã\n  // èªè­ãããã¨ãç®çã¨ãã¦çä¿¡ãªã¼ãã£ãªãè´ãå§ããã¨ãã«å®è¡ããã\n  // ã¤ãã³ããã³ãã©ãè¡¨ãã¾ãï¼éå§ã¤ãã³ããçºçããã¨ãï¼ã\n  set onstart(handler: (ev: Event) => any) {\n    this.startHandler = handler;\n  }\n\n  // The onend property of the SpeechRecognition interface represents\n  // an event handler that will run when the speech recognition\n  // service has disconnected (when the end event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onendãã­ããã£ã¯ã\n  // é³å£°èªè­ãµã¼ãã¹ãåæ­ãããã¨ãï¼çµäºã¤ãã³ããçºçããã¨ãï¼ã«\n  // å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  set onend(handler: (ev: Event) => any) {\n    this.endHandler = handler;\n  }\n\n  // The start() method of the Web Speech API starts the speech recognition service\n  // listening to incoming audio with intent to recognize grammars\n  // associated with the current SpeechRecognition.\n  //\n  // Web Speech APIã®startï¼ï¼ã¡ã½ããã¯ãç¾å¨ã®SpeechRecognitionã«\n  // é¢é£ä»ããããææ³ãèªè­ãããã¨ãç®çã¨ãã¦ã\n  // çä¿¡é³å£°ãè´åããé³å£°èªè­ãµã¼ãã¹ãéå§ãã¾ãã\n  public start(): void {\n    this.internal.start();\n    this.ref.tick();\n  }\n\n  // The stop() method of the Web Speech API stops the speech recognition service\n  // from listening to incoming audio, and attempts to return a SpeechRecognitionResult\n  // using the audio captured so far.\n  //\n  // Web Speech APIã®stopï¼ï¼ã¡ã½ããã¯ãé³å£°èªè­ãµã¼ãã¹ãçä¿¡é³å£°ãè´åããã®ãåæ­¢ãã\n  // ããã¾ã§ã«åå¾ããé³å£°ãä½¿ç¨ãã¦SpeechRecognitionResultãè¿ããã¨ãã¾ãã\n  public stop(): void {\n    this.internal.stop();\n    this.ref.tick();\n  }\n\n  // The abort() method of the Web Speech API stops the speech recognition service\n  // from listening to incoming audio, and doesn't attempt to return\n  // a SpeechRecognitionResult.\n  //\n  // Web Speech APIã®abortï¼ï¼ã¡ã½ããã¯ãé³å£°èªè­ãµã¼ãã¹ãçä¿¡ãªã¼ãã£ãªãè´ãã®ãããã\n  // SpeechRecognitionResultãè¿ããã¨ãã¾ããã\n  public abort(): void {\n    this.internal.abort();\n    this.ref.tick();\n  }\n\n\n}\n","import { Provider } from '@angular/core';\n\nimport {\n  SpeechRecognitionContinuous,\n  SpeechRecognitionInterimResults,\n  SpeechRecognitionMaxAlternatives,\n} from './service/speech-recognition.token';\n\n// tslint:disable-next-line:class-name\nexport const SPEECH_RECOGNITION_DEFAULT: Provider[] = [\n  {\n    provide: SpeechRecognitionContinuous,\n    useValue: false,\n  },\n  {\n    provide: SpeechRecognitionInterimResults,\n    useValue: false,\n  },\n  {\n    provide: SpeechRecognitionMaxAlternatives,\n    useValue: 1,\n  },\n];\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\n\nimport {\n  isPlatformBrowser,\n} from '@angular/common';\n\nimport {\n  SpeechRecognitionGrammars,\n  SpeechRecognitionLang,\n  SpeechRecognitionContinuous,\n  SpeechRecognitionInterimResults,\n  SpeechRecognitionMaxAlternatives,\n  SpeechRecognitionServiceUri,\n  SpeechRecognitionAudiostartHandler,\n  SpeechRecognitionSoundstartHandler,\n  SpeechRecognitionSpeechstartHandler,\n  SpeechRecognitionSpeechendHandler,\n  SpeechRecognitionSoundendHandler,\n  SpeechRecognitionAudioendHandler,\n  SpeechRecognitionResultHandler,\n  SpeechRecognitionNomatchHandler,\n  SpeechRecognitionErrorHandler,\n  SpeechRecognitionStartHandler,\n  SpeechRecognitionEndHandler,\n} from './service/speech-recognition.token';\n\nimport {\n  RxSpeechRecognitionService,\n} from './service/rx-speech-recognition.service';\nimport {\n  SpeechRecognitionService,\n} from './service/speech-recognition.service';\n\nimport { SpeechRecognitionConfig } from './speech-recognition.config';\nimport { SPEECH_RECOGNITION_DEFAULT } from './speech-recognition.provider';\n\n@NgModule({\n  providers: [\n    SPEECH_RECOGNITION_DEFAULT,\n  ],\n})\nexport class SpeechRecognitionModule {\n\n  constructor(\n    @Inject(PLATFORM_ID) platformId: string\n  ) {\n    if (isPlatformBrowser(platformId) === false) {\n      throw new Error('SpeechRecognitionModule: it run on PlatformBrowser.');\n    }\n  }\n\n  static forRoot(config: SpeechRecognitionConfig): ModuleWithProviders {\n    return {\n      ngModule: SpeechRecognitionModule,\n      providers: [\n        // tslint:disable:max-line-length\n        ...(config.grammars !== undefined && config.grammars != null ? [{ useValue: config.grammars, provide: SpeechRecognitionGrammars }] : []),\n        ...(config.lang !== undefined && config.lang != null ? [{ useValue: config.lang, provide: SpeechRecognitionLang }] : []),\n        ...(config.continuous !== undefined && config.continuous != null ? [{ useValue: config.continuous, provide: SpeechRecognitionContinuous }] : []),\n        ...(config.interimResults !== undefined && config.interimResults != null ? [{ useValue: config.interimResults, provide: SpeechRecognitionInterimResults }] : []),\n        ...(config.maxAlternatives !== undefined && config.maxAlternatives != null ? [{ useValue: config.maxAlternatives, provide: SpeechRecognitionMaxAlternatives }] : []),\n        ...(config.serviceURI !== undefined && config.serviceURI != null ? [{ useValue: config.serviceURI, provide: SpeechRecognitionServiceUri }] : []),\n        ...(config.onaudiostart instanceof Function ? [{ useValue: config.onaudiostart, provide: SpeechRecognitionAudiostartHandler }] : []),\n        ...(config.onsoundstart instanceof Function ? [{ useValue: config.onsoundstart, provide: SpeechRecognitionSoundstartHandler }] : []),\n        ...(config.onspeechstart instanceof Function ? [{ useValue: config.onspeechstart, provide: SpeechRecognitionSpeechstartHandler }] : []),\n        ...(config.onspeechend instanceof Function ? [{ useValue: config.onspeechend, provide: SpeechRecognitionSpeechendHandler }] : []),\n        ...(config.onsoundend instanceof Function ? [{ useValue: config.onsoundend, provide: SpeechRecognitionSoundendHandler }] : []),\n        ...(config.onaudioend instanceof Function ? [{ useValue: config.onaudioend, provide: SpeechRecognitionAudioendHandler }] : []),\n        ...(config.onresult instanceof Function ? [{ useValue: config.onresult, provide: SpeechRecognitionResultHandler }] : []),\n        ...(config.onnomatch instanceof Function ? [{ useValue: config.onnomatch, provide: SpeechRecognitionNomatchHandler }] : []),\n        ...(config.onerror instanceof Function ? [{ useValue: config.onerror, provide: SpeechRecognitionErrorHandler }] : []),\n        ...(config.onstart instanceof Function ? [{ useValue: config.onstart, provide: SpeechRecognitionStartHandler }] : []),\n        ...(config.onend instanceof Function ? [{ useValue: config.onend, provide: SpeechRecognitionEndHandler }] : []),\n        { useClass: SpeechRecognitionService, provide: SpeechRecognitionService },\n        { useClass: RxSpeechRecognitionService, provide: RxSpeechRecognitionService }\n      ],\n    };\n  }\n\n  static withConfig(config: SpeechRecognitionConfig): ModuleWithProviders {\n    return {\n      ngModule: SpeechRecognitionModule,\n      providers: [\n        // tslint:disable:max-line-length\n        ...(config.grammars !== undefined && config.grammars != null ? [{ useValue: config.grammars, provide: SpeechRecognitionGrammars }] : []),\n        ...(config.lang !== undefined && config.lang != null ? [{ useValue: config.lang, provide: SpeechRecognitionLang }] : []),\n        ...(config.continuous !== undefined && config.continuous != null ? [{ useValue: config.continuous, provide: SpeechRecognitionContinuous }] : []),\n        ...(config.interimResults !== undefined && config.interimResults != null ? [{ useValue: config.interimResults, provide: SpeechRecognitionInterimResults }] : []),\n        ...(config.maxAlternatives !== undefined && config.maxAlternatives != null ? [{ useValue: config.maxAlternatives, provide: SpeechRecognitionMaxAlternatives }] : []),\n        ...(config.serviceURI !== undefined && config.serviceURI != null ? [{ useValue: config.serviceURI, provide: SpeechRecognitionServiceUri }] : []),\n        ...(config.onaudiostart instanceof Function ? [{ useValue: config.onaudiostart, provide: SpeechRecognitionAudiostartHandler }] : []),\n        ...(config.onsoundstart instanceof Function ? [{ useValue: config.onsoundstart, provide: SpeechRecognitionSoundstartHandler }] : []),\n        ...(config.onspeechstart instanceof Function ? [{ useValue: config.onspeechstart, provide: SpeechRecognitionSpeechstartHandler }] : []),\n        ...(config.onspeechend instanceof Function ? [{ useValue: config.onspeechend, provide: SpeechRecognitionSpeechendHandler }] : []),\n        ...(config.onsoundend instanceof Function ? [{ useValue: config.onsoundend, provide: SpeechRecognitionSoundendHandler }] : []),\n        ...(config.onaudioend instanceof Function ? [{ useValue: config.onaudioend, provide: SpeechRecognitionAudioendHandler }] : []),\n        ...(config.onresult instanceof Function ? [{ useValue: config.onresult, provide: SpeechRecognitionResultHandler }] : []),\n        ...(config.onnomatch instanceof Function ? [{ useValue: config.onnomatch, provide: SpeechRecognitionNomatchHandler }] : []),\n        ...(config.onerror instanceof Function ? [{ useValue: config.onerror, provide: SpeechRecognitionErrorHandler }] : []),\n        ...(config.onstart instanceof Function ? [{ useValue: config.onstart, provide: SpeechRecognitionStartHandler }] : []),\n        ...(config.onend instanceof Function ? [{ useValue: config.onend, provide: SpeechRecognitionEndHandler }] : []),\n      ]\n    };\n  }\n}\n"]}