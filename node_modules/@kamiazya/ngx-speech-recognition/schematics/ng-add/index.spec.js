"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const test_1 = require("@schematics/angular/utility/test");
const path = require("path");
const config_1 = require("@schematics/angular/utility/config");
const schematics_1 = require("@angular/cdk/schematics");
const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
// tslint:disable-next-line:max-line-length
const package_setting_1 = require("../util/package-setting");
const collectionPath = path.join(__dirname, '../collection.json');
function createTestApp(appOptions = {}) {
    const baseRunner = new testing_1.SchematicTestRunner('schematics', collectionPath);
    const workspaceTree = baseRunner.runExternalSchematic('@schematics/angular', 'workspace', {
        name: 'workspace',
        version: '7.1.2',
        newProjectRoot: 'projects',
    });
    return baseRunner.runExternalSchematic('@schematics/angular', 'application', Object.assign({}, appOptions, { name: 'example-app' }), workspaceTree);
}
describe('ngx-face-api-js-schematics', () => {
    it('addDependencies works', () => __awaiter(this, void 0, void 0, function* () {
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        const tree = yield runner.runSchematicAsync('ng-add', {}, createTestApp()).toPromise();
        expect(tree.files).toContain('/package.json');
        const packageJson = JSON.parse(test_1.getFileContent(tree, '/package.json'));
        expect(Object.keys(packageJson.dependencies)).toContain(package_setting_1.NGX_SPEECH_RECOGNITION_PACKAGE_NAME);
    }));
    it('addNgxFaceApiJsModule works', () => __awaiter(this, void 0, void 0, function* () {
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        const tree = yield runner.runSchematicAsync('ng-add', {}, createTestApp()).toPromise();
        const workspace = config_1.getWorkspace(tree);
        const project = schematics_1.getProjectFromWorkspace(workspace);
        const appModulePath = ng_ast_utils_1.getAppModulePath(tree, schematics_1.getProjectMainFile(project));
        if (appModulePath) {
            const appModuleContent = test_1.getFileContent(tree, appModulePath);
            expect(appModuleContent).toMatch(`${package_setting_1.NGX_SPEECH_RECOGNITION_MODULE_NAME}.forRoot`);
        }
    }));
});
//# sourceMappingURL=index.spec.js.map