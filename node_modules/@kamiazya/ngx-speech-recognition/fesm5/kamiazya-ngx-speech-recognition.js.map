{"version":3,"file":"kamiazya-ngx-speech-recognition.js.map","sources":["ng://@kamiazya/ngx-speech-recognition/lib/polifill.ts","ng://@kamiazya/ngx-speech-recognition/lib/service/speech-recognition.token.ts","ng://@kamiazya/ngx-speech-recognition/lib/service/speech-recognition.common.ts","ng://@kamiazya/ngx-speech-recognition/lib/service/rx-speech-recognition.service.ts","ng://@kamiazya/ngx-speech-recognition/lib/service/speech-recognition.service.ts","ng://@kamiazya/ngx-speech-recognition/lib/speech-recognition.provider.ts","ng://@kamiazya/ngx-speech-recognition/lib/speech-recognition.module.ts"],"sourcesContent":["if (window['webkitSpeechRecognition']) {\n  window['SpeechRecognition'] = window['webkitSpeechRecognition'];\n}\nif (window['webkitSpeechGrammarList']) {\n  window['SpeechGrammarList'] = window['webkitSpeechGrammarList'];\n}\n","import { InjectionToken } from '@angular/core';\n\nimport {\n  SpeechGrammarListType,\n} from '../adapter';\n\nexport const SpeechRecognitionGrammars = new InjectionToken<SpeechGrammarListType>('speech-recognition.grammars');\nexport const SpeechRecognitionLang = new InjectionToken<string>('speech-recognition.lang');\nexport const SpeechRecognitionContinuous = new InjectionToken<boolean>('speech-recognition.continuous');\nexport const SpeechRecognitionInterimResults = new InjectionToken<boolean>('speech-recognition.interimResults');\nexport const SpeechRecognitionMaxAlternatives = new InjectionToken<number>('speech-recognition.maxAlternatives');\nexport const SpeechRecognitionServiceUri = new InjectionToken<string>('speech-recognition.serviceURI');\nexport const SpeechRecognitionAudiostartHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onaudiostart');\nexport const SpeechRecognitionSoundstartHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onsoundstart');\nexport const SpeechRecognitionSpeechstartHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onspeechstart');\nexport const SpeechRecognitionSpeechendHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onspeechend');\nexport const SpeechRecognitionSoundendHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onsoundend');\nexport const SpeechRecognitionAudioendHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onaudioend');\nexport const SpeechRecognitionResultHandler = new InjectionToken<(ev: SpeechRecognitionEvent) => any>('speech-recognition.onresult');\nexport const SpeechRecognitionNomatchHandler = new InjectionToken<(ev: SpeechRecognitionEvent) => any>('speech-recognition.onnomatch');\nexport const SpeechRecognitionErrorHandler = new InjectionToken<(ev: SpeechRecognitionError) => any>('speech-recognition.onerror');\nexport const SpeechRecognitionStartHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onstart');\nexport const SpeechRecognitionEndHandler = new InjectionToken<(ev: Event) => any>('speech-recognition.onend');\n","import {\n  SpeechGrammarListType,\n} from '../adapter';\n\nexport class SpeechRecognitionCommon {\n\n  protected internal: SpeechRecognition = new SpeechRecognition();\n\n  constructor(\n    protected _grammars: SpeechGrammarListType,\n    protected _lang: string,\n    protected _continuous: boolean,\n    protected _interimResults: boolean,\n    protected _maxAlternatives: number,\n    protected _serviceURI: string,\n  ) { }\n\n\n  /**\n   * Property\n   */\n\n\n  // The grammars property of the SpeechRecognition interface returns and sets\n  // a collection of SpeechGrammar objects\n  // that represent the grammars that will be understood\n  // by the current SpeechRecognition.\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®grammarsãã­ããã£ã¯ã\n  // ç¾å¨ã®SpeechRecognitionã§èªè­ãããææ³ãè¡¨ã\n  // SpeechGrammarãªãã¸ã§ã¯ãã®ã³ã¬ã¯ã·ã§ã³ãè¿ãã¦è¨­å®ãã¾ãã\n  get grammars(): SpeechGrammarListType {\n    return this._grammars;\n  }\n\n  set grammars(grammars: SpeechGrammarListType) {\n    this._grammars = grammars;\n    if (this._grammars !== undefined && this._grammars != null && this.internal) {\n      this.internal.grammars = this._grammars;\n    }\n  }\n\n  // The lang property of the SpeechRecognition interface returns\n  // and sets the language of the current SpeechRecognition.\n  // If not specified, this defaults to the HTML lang attribute value,\n  // or the user agent's language setting if that isn't set either.\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®langãã­ããã£ã¯ã\n  // ç¾å¨ã®SpeechRecognitionã®è¨èªãè¿ãã¦è¨­å®ãã¾ãã\n  // æå®ããã¦ããªãå ´åãããã¯ããã©ã«ãã§HTMLã®langå±æ§ã®å¤ã\n  // ã¾ãã¯ã¦ã¼ã¶ã¨ã¼ã¸ã§ã³ãã®è¨èªè¨­å®ãè¨­å®ããã¦ããªãå ´åã¯\n  // ãã®å¤ã«ãªãã¾ãã\n  get lang(): string {\n    return this._lang;\n  }\n\n  set lang(lang: string) {\n    this._lang = lang;\n    if (this._lang !== undefined && this._lang != null && this.internal) {\n      this.internal.lang = this._lang;\n    }\n  }\n\n  // The continuous property of the SpeechRecognition interface controls\n  // whether continuous results are returned for each recognition, or only a single result.\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®é£ç¶ãã­ããã£ã¯ã\n  // èªè­çµæãã¨ã«é£ç¶ããçµæãè¿ãããåä¸ã®çµæã®ã¿ãè¿ãããå¶å¾¡ãã¾ãã\n  get continuous(): boolean {\n    return this._continuous;\n  }\n\n  set continuous(continuous: boolean) {\n    this._continuous = continuous;\n    if (this._continuous !== undefined && this._continuous != null && this.internal) {\n      this.internal.continuous = this._continuous;\n    }\n  }\n\n  // The interimResults property of the SpeechRecognition interface controls\n  // whether interim results should be returned (true)\n  // or not (false.) Interim results are results that are not yet final\n  // (e.g. the SpeechRecognitionResult.isFinal property is false.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®interimResultsãã­ããã£ã¯ã\n  // ä¸­éçµæãè¿ããã©ããï¼trueï¼ãããã§ãªããï¼falseï¼ãå¶å¾¡ãã¾ãã\n  // ä¸­éçµæã¯ãæçµæ®µéã§ã¯ãªãçµæã§ãï¼SpeechRecognitionResult.isFinalãã­ããã£ã¯falseã§ãï¼ã\n  get interimResults(): boolean {\n    return this._interimResults;\n  }\n  set interimResults(interimResults: boolean) {\n    this._interimResults = interimResults;\n    if (this._interimResults !== undefined && this._interimResults != null && this.internal) {\n      this.internal.interimResults = this._interimResults;\n    }\n  }\n\n  // The maxAlternatives property of the SpeechRecognition interface sets\n  // the maximum number of SpeechRecognitionAlternatives\n  // provided per SpeechRecognitionResult.\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®maxAlternativesãã­ããã£ã¯ã\n  // SpeechRecognitionResultãã¨ã«æä¾ããã\n  // SpeechRecognitionAlternativesã®æå¤§æ°ãè¨­å®ãã¾ãã\n  get maxAlternatives(): number {\n    return this._maxAlternatives;\n  }\n  set maxAlternatives(maxAlternatives: number) {\n    this._maxAlternatives = maxAlternatives;\n    if (this._maxAlternatives !== undefined && this._maxAlternatives != null && this.internal) {\n      this.internal.maxAlternatives = this._maxAlternatives;\n    }\n  }\n\n  // The serviceURI property of the SpeechRecognition interface specifies\n  // the location of the speech recognition service\n  // used by the current SpeechRecognition to handle\n  // the actual recognition. The default is the user agent's\n  // default speech service.\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®serviceURIãã­ããã£ã¯ã\n  // ç¾å¨ã®SpeechRecognitionãå®éã®èªè­ãå¦çããããã«ä½¿ç¨ãã\n  // é³å£°èªè­ãµã¼ãã¹ã®å ´æãæå®ãã¾ãã\n  // ããã©ã«ãã¯ã¦ã¼ã¶ã¨ã¼ã¸ã§ã³ãã®ããã©ã«ãé³å£°ãµã¼ãã¹ã§ãã\n  get serviceURI(): string {\n    return this._serviceURI;\n  }\n  set serviceURI(serviceURI: string) {\n    this._serviceURI = serviceURI;\n    if (this._serviceURI !== undefined && this._serviceURI != null && this.internal) {\n      this.internal.serviceURI = this._serviceURI;\n    }\n  }\n\n}\n","import {\n  Observable,\n  pipe,\n  UnaryFunction,\n  Subject,\n  BehaviorSubject,\n} from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { Injectable, ApplicationRef, Inject, Optional } from '@angular/core';\n\nimport {\n  SpeechRecognitionGrammars,\n  SpeechRecognitionLang,\n  SpeechRecognitionContinuous,\n  SpeechRecognitionInterimResults,\n  SpeechRecognitionMaxAlternatives,\n  SpeechRecognitionServiceUri,\n} from './speech-recognition.token';\n\nimport {\n  SpeechGrammarListType,\n  SpeechRecognitionServiceEvent,\n} from '../adapter';\n\nimport {\n  SpeechRecognitionCommon,\n} from './speech-recognition.common';\n\nconst onType = (type: string) => {\n  return filter((e: SpeechRecognitionServiceEvent) => (e.type === type));\n};\n\nexport const resultList: UnaryFunction<Observable<SpeechRecognitionEvent>, Observable<SpeechRecognitionResultList>> = pipe(\n  onType('result'),\n  map((e: SpeechRecognitionEvent): SpeechRecognitionResultList => e.results),\n);\n\n@Injectable()\nexport class RxSpeechRecognitionService extends SpeechRecognitionCommon {\n\n  private proxy$: Subject<SpeechRecognitionServiceEvent> = new Subject();\n\n  private _started$ = new BehaviorSubject<boolean>(false);\n\n  get $(): Observable<SpeechRecognitionServiceEvent> {\n    return this.proxy$ as Observable<SpeechRecognitionServiceEvent>;\n  }\n\n  get started$(): Observable<boolean> {\n    return this._started$ as Observable<boolean>;\n  }\n\n  constructor(\n    private ref: ApplicationRef,\n\n    @Optional() @Inject(SpeechRecognitionGrammars)\n    grammars: SpeechGrammarListType,\n\n    @Optional() @Inject(SpeechRecognitionLang)\n    lang: string,\n\n    @Optional() @Inject(SpeechRecognitionContinuous)\n    continuous: boolean,\n\n    @Optional() @Inject(SpeechRecognitionInterimResults)\n    interimResults: boolean,\n\n    @Optional() @Inject(SpeechRecognitionMaxAlternatives)\n    maxAlternatives: number,\n\n    @Optional() @Inject(SpeechRecognitionServiceUri)\n    serviceURI: string,\n  ) {\n    super(grammars, lang, continuous, interimResults, maxAlternatives, serviceURI);\n    this.initInternal();\n  }\n\n  private initInternal() {\n    // set handlers\n    const handler = (e) => {\n      this.proxy$.next(e);\n      this.ref.tick();\n    };\n    const errHandler = (e) => {\n      this.proxy$.error(e);\n      this.ref.tick();\n    };\n    this.internal.onaudiostart = handler;\n    this.internal.onsoundstart = handler;\n    this.internal.onspeechstart = handler;\n\n    this.internal.onspeechend = handler;\n    this.internal.onsoundend = handler;\n    this.internal.onaudioend = handler;\n\n    this.internal.onresult = handler;\n    this.internal.onnomatch = handler;\n    this.internal.onerror = errHandler;\n\n    this.internal.onstart = handler;\n    this.internal.onend = handler;\n\n    // see setter methods\n    this.grammars = this._grammars;\n    this.lang = this._lang;\n    this.continuous = this._continuous;\n    this.interimResults = this._interimResults;\n    this.maxAlternatives = this._maxAlternatives;\n    this.serviceURI = this._serviceURI;\n\n    this.proxy$.subscribe((e) => {\n      switch (e.type) {\n        case 'start':\n          this._started$.next(true);\n          break;\n        case 'end':\n          this._started$.next(false);\n          break;\n      }\n    });\n  }\n\n  // The listen() method aims to recognize the grammar associated with the current SpeechRecognition,\n  // Observable is returned for handling voice recognition service listening to incoming voice.\n  // When you subscrive the return value, listening begins and listening ends when an end event occurs.\n  // Interrupt listening by unsubscribing in the middle.\n  //\n  // listen() ã¡ã½ããã¯ãç¾å¨ã®SpeechRecognitionã«\n  // é¢é£ä»ããããææ³ãèªè­ãããã¨ãç®çã¨ãã¦ã\n  // çä¿¡é³å£°ãè´åããé³å£°èªè­ãµã¼ãã¹ãæ±ãããã®Observableãè¿ããã¾ãã\n  // è¿ãå¤ãsubscriveããã¨è´åãéå§ãããendã®ã¤ãã³ããçºçããã¨è´åãçµäºãã¾ãã\n  // éä¸­ã§unsbscriveãããã¨ã§è´åãä¸­æ­ãã¾ãã\n  public listen(): Observable<SpeechRecognitionServiceEvent> {\n\n    const listener = new Observable<SpeechRecognitionServiceEvent>((ovserver) => {\n      // create subscriotion\n      const subscriotion = this.proxy$.subscribe({\n        next: (e) => {\n          ovserver.next(e);\n\n          if (e.type && e.type === 'end') {\n            this.internal.stop();\n            ovserver.complete();\n            subscriotion.unsubscribe();\n          }\n        },\n        error: (e) => ovserver.error(e),\n      });\n\n      // Speech Recognition start\n      this.internal.start();\n\n      return () => {\n        this.internal.abort();\n        subscriotion.unsubscribe();\n      };\n    });\n\n    return listener;\n  }\n\n}\n","import {\n  Injectable,\n  ApplicationRef,\n  Inject,\n  Optional,\n} from '@angular/core';\n\nimport {\n  SpeechRecognitionGrammars,\n  SpeechRecognitionLang,\n  SpeechRecognitionContinuous,\n  SpeechRecognitionInterimResults,\n  SpeechRecognitionMaxAlternatives,\n  SpeechRecognitionServiceUri,\n  SpeechRecognitionAudiostartHandler,\n  SpeechRecognitionSoundstartHandler,\n  SpeechRecognitionSpeechstartHandler,\n  SpeechRecognitionSpeechendHandler,\n  SpeechRecognitionSoundendHandler,\n  SpeechRecognitionAudioendHandler,\n  SpeechRecognitionResultHandler,\n  SpeechRecognitionNomatchHandler,\n  SpeechRecognitionErrorHandler,\n  SpeechRecognitionStartHandler,\n  SpeechRecognitionEndHandler,\n} from './speech-recognition.token';\n\nimport {\n  SpeechGrammarListType,\n} from '../adapter';\n\nimport {\n  SpeechRecognitionCommon,\n} from './speech-recognition.common';\n\n// @dynamic\n@Injectable()\n/**\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API\n */\nexport class SpeechRecognitionService extends SpeechRecognitionCommon {\n\n  private initHandlers() {\n    const _ = () => { };\n    if (!this.audiostartHandler) { this.audiostartHandler = _; }\n    if (!this.soundstartHandler) { this.soundstartHandler = _; }\n    if (!this.speechstartHandler) { this.speechstartHandler = _; }\n    if (!this.speechendHandler) { this.speechendHandler = _; }\n    if (!this.soundendHandler) { this.soundendHandler = _; }\n    if (!this.audioendHandler) { this.audioendHandler = _; }\n    if (!this.resultHandler) { this.resultHandler = _; }\n    if (!this.nomatchHandler) { this.nomatchHandler = _; }\n    if (!this.errorHandler) { this.errorHandler = _; }\n    if (!this.startHandler) { this.startHandler = _; }\n    if (!this.endHandler) { this.endHandler = _; }\n  }\n\n  private initInternal() {\n    // see setter methods\n    this.grammars = this._grammars;\n    this.lang = this._lang;\n    this.continuous = this._continuous;\n    this.interimResults = this._interimResults;\n    this.maxAlternatives = this._maxAlternatives;\n    this.serviceURI = this._serviceURI;\n\n    this.internal.onaudiostart = (e: Event) => {\n      this.audiostartHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onsoundstart = (e: Event) => {\n      this.soundstartHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onspeechstart = (e: Event) => {\n      this.speechstartHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onspeechend = (e: Event) => {\n      this.speechendHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onsoundend = (e: Event) => {\n      this.soundendHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onaudioend = (e: Event) => {\n      this.audioendHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onresult = (e: SpeechRecognitionEvent) => {\n      this.resultHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onnomatch = (e: SpeechRecognitionEvent) => {\n      this.nomatchHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onerror = (e: SpeechRecognitionError) => {\n      this.errorHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onstart = (e: Event) => {\n      this.startHandler(e);\n      this.ref.tick();\n    };\n    this.internal.onend = (e: Event) => {\n      this.endHandler(e);\n      this.ref.tick();\n    };\n  }\n\n\n  constructor(\n    private ref: ApplicationRef,\n\n    @Optional() @Inject(SpeechRecognitionGrammars)\n    grammars: SpeechGrammarListType,\n\n    @Optional() @Inject(SpeechRecognitionLang)\n    lang: string,\n\n    @Optional() @Inject(SpeechRecognitionContinuous)\n    continuous: boolean,\n\n    @Optional() @Inject(SpeechRecognitionInterimResults)\n    interimResults: boolean,\n\n    @Optional() @Inject(SpeechRecognitionMaxAlternatives)\n    maxAlternatives: number,\n\n    @Optional() @Inject(SpeechRecognitionServiceUri)\n    serviceURI: string,\n\n    @Optional() @Inject(SpeechRecognitionAudiostartHandler)\n    private audiostartHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionSoundstartHandler)\n    private soundstartHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionSpeechstartHandler)\n    private speechstartHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionSpeechendHandler)\n    private speechendHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionSoundendHandler)\n    private soundendHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionAudioendHandler)\n    private audioendHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionResultHandler)\n    private resultHandler: (ev: SpeechRecognitionEvent) => any,\n\n    @Optional() @Inject(SpeechRecognitionNomatchHandler)\n    private nomatchHandler: (ev: SpeechRecognitionEvent) => any,\n\n    @Optional() @Inject(SpeechRecognitionErrorHandler)\n    private errorHandler: (ev: SpeechRecognitionError) => any,\n\n    @Optional() @Inject(SpeechRecognitionStartHandler)\n    private startHandler: (ev: Event) => any,\n\n    @Optional() @Inject(SpeechRecognitionEndHandler)\n    private endHandler: (ev: Event) => any\n  ) {\n    super(grammars, lang, continuous, interimResults, maxAlternatives, serviceURI);\n\n    this.initHandlers();\n\n    this.initInternal();\n  }\n\n\n  // The onaudiostart property of the SpeechRecognition interface\n  // represents an event handler that will run\n  // when the user agent has started to capture audio\n  // (when the audiostart event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onaudiostartãã­ããã£ã¯ã\n  // ã¦ã¼ã¶ã¼ã¨ã¼ã¸ã§ã³ãããªã¼ãã£ãªã®ã­ã£ããã£ãéå§ããã¨ã\n  // ï¼audiostartã¤ãã³ããçºçããã¨ãï¼ã«å®è¡ãããã¤ãã³ããã³ãã©ã\n  // è¡¨ãã¾ãã\n  set onaudiostart(handler: (ev: Event) => any) {\n    this.audiostartHandler = handler;\n  }\n\n  // The onsoundstart property of the SpeechRecognition interface represents\n  // an event handler that will run when any sound\n  // â recognisable speech or not\n  // â has been detected (when the soundstart event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onsoundstartãã­ããã£ã¯ã\n  // ãµã¦ã³ãèªè­å¯è½ãªé³å£°ãæ¤åºãããã¨ãã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ã\n  // ï¼ãµã¦ã³ãã¹ã¿ã¼ãã¤ãã³ããçºçããã¨ãï¼ã\n  set onsoundstart(handler: (ev: Event) => any) {\n    this.soundstartHandler = handler;\n  }\n\n  // The onspeechstart property of the SpeechRecognition interface represents\n  // an event handler that will run when sound recognised\n  // by the speech recognition service as speech has been detected\n  // (when the speechstart event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onspeechstartãã­ããã£ã¯ã\n  // ã¹ãã¼ããæ¤åºãããã¨ãï¼ã¹ãã¼ãéå§ã¤ãã³ããçºçããã¨ãï¼ã«\n  // é³å£°èªè­ãµã¼ãã¹ã«ãã£ã¦èªè­ããããµã¦ã³ããå®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  set onspeechstart(handler: (ev: Event) => any) {\n    this.speechstartHandler = handler;\n  }\n\n  // The onspeechend property of the SpeechRecognition interface represents\n  // an event handler that will run when speech recognised\n  // by the speech recognition service has stopped being detected\n  // (when the speechend event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onspeechendãã­ããã£ã¯ã\n  // é³å£°èªè­ãµã¼ãã¹ã«ãã£ã¦èªè­ãããé³å£°ãæ¤åºãããªããªã£ãã¨ã\n  // ï¼Speechendã¤ãã³ããçºçããã¨ãï¼ã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  set onspeechend(handler: (ev: Event) => any) {\n    this.speechendHandler = handler;\n  }\n\n  // The onsoundend property of the SpeechRecognition interface represents\n  // an event handler that will run when any sound\n  // â recognisable speech or not â has stopped being detected\n  // (when the soundend event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onsoundendãã­ããã£ã¯ã\n  // ãµã¦ã³ãèªè­å¯è½ãªé³å£°ãæ¤åºãããªããªã£ãã¨ãã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ã\n  // ï¼ãµã¦ã³ãã¨ã³ãã¤ãã³ããçºçããã¨ãï¼ã\n  set onsoundend(handler: (ev: Event) => any) {\n    this.soundendHandler = handler;\n  }\n\n  // The onaudioend property of the SpeechRecognition interface represents\n  // an event handler that will run\n  // when the user agent has finished capturing audio\n  // (when the audioend event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onaudioendãã­ããã£ã¯ã\n  // ã¦ã¼ã¶ã¼ã¨ã¼ã¸ã§ã³ãããªã¼ãã£ãªã®ã­ã£ããã£ãçµäºããã¨ã\n  // ï¼ãªã¼ãã£ãªã¨ã³ãã¤ãã³ããçºçããã¨ãï¼ã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  set onaudioend(handler: (ev: Event) => any) {\n    this.audioendHandler = handler;\n  }\n\n  // The onresult property of the SpeechRecognition interface represents\n  // an event handler that will run\n  // when the speech recognition service returns a result\n  // â a word or phrase has been positively recognized\n  // and this has been communicated back to the app\n  // (when the result event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onresultãã­ããã£ã¯ã\n  // é³å£°èªè­ãµã¼ãã¹ãçµæãè¿ãã¨ãã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  // åèªããã¬ã¼ãºãç¢ºå®ã«èªè­ãããçµæã¤ãã³ããçºçããã¨ãã«ã¢ããªã«è¿ããã¾ãã\n  set onresult(handler: (ev: SpeechRecognitionEvent) => any) {\n    this.resultHandler = handler;\n  }\n\n  // The onnomatch property of the SpeechRecognition interface represents\n  // an event handler that will run\n  // when the speech recognition service returns\n  // a final result with no significant recognition\n  // (when the nomatch event fires.)\n  //\n  // This may involve some degree of recognition\n  //  which doesn't meet or exceed the confidence threshold.\n  //\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onnomatchãã­ããã£ã¯ã\n  // é³å£°èªè­ãµã¼ãã¹ãéè¦ãªèªè­ãªãã«ï¼nomatchã¤ãã³ããçºçããã¨ãï¼\n  // æçµçµæãè¿ãã¨ãã«å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  //\n  // ããã«ã¯ãããç¨åº¦ã®èªè­ãå¿è¦ã§ãããããã¯ä¿¡é ¼éçãæºãããªããã\n  // è¶ãã¦ããã\n  set onnomatch(handler: (ev: SpeechRecognitionEvent) => any) {\n    this.nomatchHandler = handler;\n  }\n\n  // The onerror property of the SpeechRecognition interface represents\n  // an event handler that will run\n  // when a speech recognition error occurs\n  // (when the error event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onerrorãã­ããã£ã¯ã\n  // é³å£°èªè­ã¨ã©ã¼ãçºçããã¨ãï¼ã¨ã©ã¼ã¤ãã³ããçºçããã¨ãï¼ã«\n  // å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  set onerror(handler: (ev: SpeechRecognitionError) => any) {\n    this.errorHandler = handler;\n  }\n\n  // The onstart property of the SpeechRecognition interface represents\n  // an event handler that will run when the speech\n  // recognition service has begun listening\n  // to incoming audio with intent to recognize grammars\n  // associated with the current SpeechRecognition\n  // (when the start event fires.)\n  //\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onstartãã­ããã£ã¯ã\n  // é³å£°èªè­ãµã¼ãã¹ãç¾å¨ã®SpeechRecognitionã«é¢é£ä»ãããã¦ããææ³ã\n  // èªè­ãããã¨ãç®çã¨ãã¦çä¿¡ãªã¼ãã£ãªãè´ãå§ããã¨ãã«å®è¡ããã\n  // ã¤ãã³ããã³ãã©ãè¡¨ãã¾ãï¼éå§ã¤ãã³ããçºçããã¨ãï¼ã\n  set onstart(handler: (ev: Event) => any) {\n    this.startHandler = handler;\n  }\n\n  // The onend property of the SpeechRecognition interface represents\n  // an event handler that will run when the speech recognition\n  // service has disconnected (when the end event fires.)\n  //\n  // SpeechRecognitionã¤ã³ã¿ã¼ãã§ã¤ã¹ã®onendãã­ããã£ã¯ã\n  // é³å£°èªè­ãµã¼ãã¹ãåæ­ãããã¨ãï¼çµäºã¤ãã³ããçºçããã¨ãï¼ã«\n  // å®è¡ãããã¤ãã³ããã³ãã©ãè¡¨ãã¾ãã\n  set onend(handler: (ev: Event) => any) {\n    this.endHandler = handler;\n  }\n\n  // The start() method of the Web Speech API starts the speech recognition service\n  // listening to incoming audio with intent to recognize grammars\n  // associated with the current SpeechRecognition.\n  //\n  // Web Speech APIã®startï¼ï¼ã¡ã½ããã¯ãç¾å¨ã®SpeechRecognitionã«\n  // é¢é£ä»ããããææ³ãèªè­ãããã¨ãç®çã¨ãã¦ã\n  // çä¿¡é³å£°ãè´åããé³å£°èªè­ãµã¼ãã¹ãéå§ãã¾ãã\n  public start(): void {\n    this.internal.start();\n    this.ref.tick();\n  }\n\n  // The stop() method of the Web Speech API stops the speech recognition service\n  // from listening to incoming audio, and attempts to return a SpeechRecognitionResult\n  // using the audio captured so far.\n  //\n  // Web Speech APIã®stopï¼ï¼ã¡ã½ããã¯ãé³å£°èªè­ãµã¼ãã¹ãçä¿¡é³å£°ãè´åããã®ãåæ­¢ãã\n  // ããã¾ã§ã«åå¾ããé³å£°ãä½¿ç¨ãã¦SpeechRecognitionResultãè¿ããã¨ãã¾ãã\n  public stop(): void {\n    this.internal.stop();\n    this.ref.tick();\n  }\n\n  // The abort() method of the Web Speech API stops the speech recognition service\n  // from listening to incoming audio, and doesn't attempt to return\n  // a SpeechRecognitionResult.\n  //\n  // Web Speech APIã®abortï¼ï¼ã¡ã½ããã¯ãé³å£°èªè­ãµã¼ãã¹ãçä¿¡ãªã¼ãã£ãªãè´ãã®ãããã\n  // SpeechRecognitionResultãè¿ããã¨ãã¾ããã\n  public abort(): void {\n    this.internal.abort();\n    this.ref.tick();\n  }\n\n\n}\n","import { Provider } from '@angular/core';\n\nimport {\n  SpeechRecognitionContinuous,\n  SpeechRecognitionInterimResults,\n  SpeechRecognitionMaxAlternatives,\n} from './service/speech-recognition.token';\n\n// tslint:disable-next-line:class-name\nexport const SPEECH_RECOGNITION_DEFAULT: Provider[] = [\n  {\n    provide: SpeechRecognitionContinuous,\n    useValue: false,\n  },\n  {\n    provide: SpeechRecognitionInterimResults,\n    useValue: false,\n  },\n  {\n    provide: SpeechRecognitionMaxAlternatives,\n    useValue: 1,\n  },\n];\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\n\nimport {\n  isPlatformBrowser,\n} from '@angular/common';\n\nimport {\n  SpeechRecognitionGrammars,\n  SpeechRecognitionLang,\n  SpeechRecognitionContinuous,\n  SpeechRecognitionInterimResults,\n  SpeechRecognitionMaxAlternatives,\n  SpeechRecognitionServiceUri,\n  SpeechRecognitionAudiostartHandler,\n  SpeechRecognitionSoundstartHandler,\n  SpeechRecognitionSpeechstartHandler,\n  SpeechRecognitionSpeechendHandler,\n  SpeechRecognitionSoundendHandler,\n  SpeechRecognitionAudioendHandler,\n  SpeechRecognitionResultHandler,\n  SpeechRecognitionNomatchHandler,\n  SpeechRecognitionErrorHandler,\n  SpeechRecognitionStartHandler,\n  SpeechRecognitionEndHandler,\n} from './service/speech-recognition.token';\n\nimport {\n  RxSpeechRecognitionService,\n} from './service/rx-speech-recognition.service';\nimport {\n  SpeechRecognitionService,\n} from './service/speech-recognition.service';\n\nimport { SpeechRecognitionConfig } from './speech-recognition.config';\nimport { SPEECH_RECOGNITION_DEFAULT } from './speech-recognition.provider';\n\n@NgModule({\n  providers: [\n    SPEECH_RECOGNITION_DEFAULT,\n  ],\n})\nexport class SpeechRecognitionModule {\n\n  constructor(\n    @Inject(PLATFORM_ID) platformId: string\n  ) {\n    if (isPlatformBrowser(platformId) === false) {\n      throw new Error('SpeechRecognitionModule: it run on PlatformBrowser.');\n    }\n  }\n\n  static forRoot(config: SpeechRecognitionConfig): ModuleWithProviders {\n    return {\n      ngModule: SpeechRecognitionModule,\n      providers: [\n        // tslint:disable:max-line-length\n        ...(config.grammars !== undefined && config.grammars != null ? [{ useValue: config.grammars, provide: SpeechRecognitionGrammars }] : []),\n        ...(config.lang !== undefined && config.lang != null ? [{ useValue: config.lang, provide: SpeechRecognitionLang }] : []),\n        ...(config.continuous !== undefined && config.continuous != null ? [{ useValue: config.continuous, provide: SpeechRecognitionContinuous }] : []),\n        ...(config.interimResults !== undefined && config.interimResults != null ? [{ useValue: config.interimResults, provide: SpeechRecognitionInterimResults }] : []),\n        ...(config.maxAlternatives !== undefined && config.maxAlternatives != null ? [{ useValue: config.maxAlternatives, provide: SpeechRecognitionMaxAlternatives }] : []),\n        ...(config.serviceURI !== undefined && config.serviceURI != null ? [{ useValue: config.serviceURI, provide: SpeechRecognitionServiceUri }] : []),\n        ...(config.onaudiostart instanceof Function ? [{ useValue: config.onaudiostart, provide: SpeechRecognitionAudiostartHandler }] : []),\n        ...(config.onsoundstart instanceof Function ? [{ useValue: config.onsoundstart, provide: SpeechRecognitionSoundstartHandler }] : []),\n        ...(config.onspeechstart instanceof Function ? [{ useValue: config.onspeechstart, provide: SpeechRecognitionSpeechstartHandler }] : []),\n        ...(config.onspeechend instanceof Function ? [{ useValue: config.onspeechend, provide: SpeechRecognitionSpeechendHandler }] : []),\n        ...(config.onsoundend instanceof Function ? [{ useValue: config.onsoundend, provide: SpeechRecognitionSoundendHandler }] : []),\n        ...(config.onaudioend instanceof Function ? [{ useValue: config.onaudioend, provide: SpeechRecognitionAudioendHandler }] : []),\n        ...(config.onresult instanceof Function ? [{ useValue: config.onresult, provide: SpeechRecognitionResultHandler }] : []),\n        ...(config.onnomatch instanceof Function ? [{ useValue: config.onnomatch, provide: SpeechRecognitionNomatchHandler }] : []),\n        ...(config.onerror instanceof Function ? [{ useValue: config.onerror, provide: SpeechRecognitionErrorHandler }] : []),\n        ...(config.onstart instanceof Function ? [{ useValue: config.onstart, provide: SpeechRecognitionStartHandler }] : []),\n        ...(config.onend instanceof Function ? [{ useValue: config.onend, provide: SpeechRecognitionEndHandler }] : []),\n        { useClass: SpeechRecognitionService, provide: SpeechRecognitionService },\n        { useClass: RxSpeechRecognitionService, provide: RxSpeechRecognitionService }\n      ],\n    };\n  }\n\n  static withConfig(config: SpeechRecognitionConfig): ModuleWithProviders {\n    return {\n      ngModule: SpeechRecognitionModule,\n      providers: [\n        // tslint:disable:max-line-length\n        ...(config.grammars !== undefined && config.grammars != null ? [{ useValue: config.grammars, provide: SpeechRecognitionGrammars }] : []),\n        ...(config.lang !== undefined && config.lang != null ? [{ useValue: config.lang, provide: SpeechRecognitionLang }] : []),\n        ...(config.continuous !== undefined && config.continuous != null ? [{ useValue: config.continuous, provide: SpeechRecognitionContinuous }] : []),\n        ...(config.interimResults !== undefined && config.interimResults != null ? [{ useValue: config.interimResults, provide: SpeechRecognitionInterimResults }] : []),\n        ...(config.maxAlternatives !== undefined && config.maxAlternatives != null ? [{ useValue: config.maxAlternatives, provide: SpeechRecognitionMaxAlternatives }] : []),\n        ...(config.serviceURI !== undefined && config.serviceURI != null ? [{ useValue: config.serviceURI, provide: SpeechRecognitionServiceUri }] : []),\n        ...(config.onaudiostart instanceof Function ? [{ useValue: config.onaudiostart, provide: SpeechRecognitionAudiostartHandler }] : []),\n        ...(config.onsoundstart instanceof Function ? [{ useValue: config.onsoundstart, provide: SpeechRecognitionSoundstartHandler }] : []),\n        ...(config.onspeechstart instanceof Function ? [{ useValue: config.onspeechstart, provide: SpeechRecognitionSpeechstartHandler }] : []),\n        ...(config.onspeechend instanceof Function ? [{ useValue: config.onspeechend, provide: SpeechRecognitionSpeechendHandler }] : []),\n        ...(config.onsoundend instanceof Function ? [{ useValue: config.onsoundend, provide: SpeechRecognitionSoundendHandler }] : []),\n        ...(config.onaudioend instanceof Function ? [{ useValue: config.onaudioend, provide: SpeechRecognitionAudioendHandler }] : []),\n        ...(config.onresult instanceof Function ? [{ useValue: config.onresult, provide: SpeechRecognitionResultHandler }] : []),\n        ...(config.onnomatch instanceof Function ? [{ useValue: config.onnomatch, provide: SpeechRecognitionNomatchHandler }] : []),\n        ...(config.onerror instanceof Function ? [{ useValue: config.onerror, provide: SpeechRecognitionErrorHandler }] : []),\n        ...(config.onstart instanceof Function ? [{ useValue: config.onstart, provide: SpeechRecognitionStartHandler }] : []),\n        ...(config.onend instanceof Function ? [{ useValue: config.onend, provide: SpeechRecognitionEndHandler }] : []),\n      ]\n    };\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
